Understood. Here’s a substantive upgrade—actual, production-ready visuals (code + assets + brand system) that will make your Blaze site look and feel like a flagship sports-intelligence product. Everything below is drop-in and respects your current palette (dark navy, burnt-orange #BF5700, turquoise #9BCBEB), investor-grade tone, and pressure-first narrative.

⸻

1) New hero: GPU-style shader background (Three.js, no frameworks)

What’s new: not just a static image—an efficient WebGL shader that renders a living flow-field + node constellation. It idles at low GPU and falls back to a static PNG if prefers-reduced-motion is set.

<section id="hero" class="viz" style="height:56vh;position:relative;overflow:hidden">
  <div class="hero-copy" style="position:absolute;inset:0;display:grid;place-content:center;z-index:2;text-align:center">
    <h1 style="margin:0 0 10px;font:800 42px/1 Inter,sans-serif;color:#E5E7EB">Transform Data into Championships</h1>
    <p style="margin:0;color:#9CA3AF">Pressure-first, investor-grade sports analytics</p>
  </div>
</section>

<script type="module">
import * as THREE from 'https://unpkg.com/three@0.160.0/build/three.module.js';

const el = document.querySelector('#hero');
const reduce = matchMedia('(prefers-reduced-motion: reduce)').matches;
if (reduce) {
  el.style.background = "center/cover no-repeat url('/assets/hero_bg_1600x900.png')";
} else {
  const r = new THREE.WebGLRenderer({antialias:true, alpha:true});
  r.setPixelRatio(devicePixelRatio); r.setSize(el.clientWidth, el.clientHeight); el.appendChild(r.domElement);
  const s = new THREE.Scene(), c = new THREE.PerspectiveCamera(55, el.clientWidth/el.clientHeight, .1, 100); c.position.z=5;
  const g = new THREE.PlaneGeometry(10, 6, 1, 1);
  const m = new THREE.ShaderMaterial({
    uniforms: { t:{value:0}, uA:{value:new THREE.Color(0xBF5700)}, uB:{value:new THREE.Color(0x9BCBEB)} },
    transparent:true,
    vertexShader:`varying vec2 vUv; void main(){ vUv=uv; gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0); }`,
    fragmentShader:`precision highp float; varying vec2 vUv; uniform float t; uniform vec3 uA,uB;
    float hash(vec2 p){ return fract(sin(dot(p, vec2(127.1,311.7)))*43758.5453123); }
    float noise(in vec2 p){ vec2 i=floor(p), f=fract(p); float a=hash(i), b=hash(i+vec2(1.,0.));
      float c=hash(i+vec2(0.,1.)), d=hash(i+vec2(1.,1.)); vec2 u=f*f*(3.-2.*f); 
      return mix(a,b,u.x)+ (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;
    }
    void main(){
      vec2 uv = vUv*vec2(1.8,1.0);
      float n = 0.; float amp=0.5; vec2 p = uv*3.0;
      for(int i=0;i<4;i++){ n += noise(p + t*0.05)*amp; p = p*1.9 + 10.0; amp*=0.55; }
      float swirl = abs(sin(uv.x*6.283+t*.4))*0.35 + n*0.25;
      vec3 col = mix(uA,uB, uv.x + 0.15*sin(t*.2));
      col *= 0.25 + 0.75*swirl;
      gl_FragColor = vec4(col, 0.9);
    }`
  });
  const mesh = new THREE.Mesh(g,m); s.add(mesh);
  const clock = new THREE.Clock();
  function loop(){ m.uniforms.t.value += clock.getDelta(); r.setSize(el.clientWidth, el.clientHeight); c.aspect=el.clientWidth/el.clientHeight; c.updateProjectionMatrix(); r.render(s,c); requestAnimationFrame(loop); }
  loop();
}
</script>

Result: a sophisticated hero that immediately signals “high-tech” while staying brand-true and readable.

⸻

2) Pressure Stream – elevated (Canvas + tooltips + event pins)

What’s new: a D3-Canvas stream that shows win probability and a pressure glow with crisp tooltips and pins. It’s fast enough for live data and can be themed to your palette.

<section class="panel" style="margin-top:18px">
  <h2 style="margin:0 0 6px">Live Pressure Stream</h2>
  <canvas id="wpStream" width="1280" height="360"></canvas>
  <div id="wpTip" style="position:absolute;padding:6px 8px;border-radius:8px;background:#0f172a;border:1px solid #1F2937;color:#E5E7EB;font:12px Inter;display:none"></div>
</section>

<script type="module">
import * as d3 from 'https://cdn.skypack.dev/d3@7';
const cvs=document.querySelector('#wpStream'), ctx=cvs.getContext('2d'), tip=document.querySelector('#wpTip');
const W=cvs.width,H=cvs.height,M={l:40,r:28,t:20,b:24}; let data=[], lastX=0,lastY=0; let _twin=18*60*1000,_t0=Date.now();

const x = t=> M.l + (t-_t0)/_twin*(W-M.l-M.r); const yWP=v=> (H-M.b)-v*(H-M.t-M.b); const yP=yWP;
function draw(){
  ctx.clearRect(0,0,W,H);
  // pressure glow
  const grd=ctx.createLinearGradient(0,M.t,0,H-M.b); grd.addColorStop(0,'rgba(191,87,0,.25)'); grd.addColorStop(1,'rgba(155,203,235,.08)'); ctx.fillStyle=grd;
  ctx.beginPath(); ctx.moveTo(M.l,yP(0)); data.forEach((d,i)=>{ const X=x(d.t),Y=yP(d.p); i?ctx.lineTo(X,Y):ctx.lineTo(X,Y); }); ctx.lineTo(x(data.at(-1)?.t||_t0),yP(0)); ctx.closePath(); ctx.fill();

  // win-prob line
  ctx.strokeStyle='#9BCBEB'; ctx.lineWidth=2; ctx.beginPath();
  data.forEach((d,i)=>{ const X=x(d.t),Y=yWP(d.wp); i?ctx.lineTo(X,Y):ctx.moveTo(X,Y); lastX=X; lastY=Y; }); ctx.stroke();

  // event pins
  ctx.fillStyle='#BF5700'; data.filter(d=>d.event).forEach(d=>{ ctx.beginPath(); ctx.arc(x(d.t), yWP(d.wp), 3, 0, Math.PI*2); ctx.fill(); });
}
const ev = new EventSource('/api/game/pressure-stream');
ev.onmessage = e=>{ const d=JSON.parse(e.data); data.push(d); const tMax=d.t; _t0=tMax-_twin; data=data.filter(x=>x.t>=_t0); draw(); };

// tooltips
cvs.addEventListener('mousemove', e=>{
  const rect=cvs.getBoundingClientRect(), mx=e.clientX-rect.left, my=e.clientY-rect.top;
  const tGuess=_t0 + (mx-M.l)/(W-M.l-M.r)*_twin;
  const idx = d3.bisector(d=>d.t).left(data,tGuess);
  const d=data[Math.min(Math.max(idx,0),data.length-1)]; if(!d) return;
  tip.style.display='block'; tip.style.left=(mx+12)+'px'; tip.style.top=(my+12)+'px';
  tip.innerHTML=`<b>${(d.wp*100).toFixed(1)}% WP</b> · Pressure ${(d.p*100|0)}% ${d.event? ' · '+d.event.label:''}`;
});
cvs.addEventListener('mouseleave', ()=>tip.style.display='none');
</script>


⸻

3) NIL Ribbon – refined (parametric 3-D with clear mapping)

What’s new: the ribbon directly encodes NIL drivers (followers, engagement, awards). It’s striking, on-brand and explainable.

<section id="nilRibbon" class="viz" style="height:54vh;margin-top:18px"></section>
<form id="nilForm" class="panel" style="max-width:840px;margin:14px auto;display:grid;gap:8px;grid-template-columns:1fr 1fr 1fr">
  <label>Followers<input id="foll" type="number" min="1000" step="1000" value="120000"></label>
  <label>Engagement %<input id="eng" type="number" min="0" max="100" step="0.1" value="4.5"></label>
  <label>Awards<input id="awd" type="number" min="0" max="10" step="1" value="3"></label>
  <button class="btn" style="grid-column:1/-1;justify-self:start">Update</button>
</form>

<script type="module">
import * as THREE from 'https://unpkg.com/three@0.160.0/build/three.module.js';
const el=document.querySelector('#nilRibbon'), r=new THREE.WebGLRenderer({antialias:true}); r.setPixelRatio(devicePixelRatio); r.setSize(el.clientWidth, el.clientHeight); el.appendChild(r.domElement);
const s=new THREE.Scene(), c=new THREE.PerspectiveCamera(50, el.clientWidth/el.clientHeight, .1, 100); c.position.set(0,1.5,8);
s.add(new THREE.HemisphereLight(0x88aaff,0x080820,.9));
const mat=new THREE.MeshPhysicalMaterial({color:0x9BCBEB, roughness:.2, metalness:.6, emissive:0x072b36, emissiveIntensity:.25, transmission:.05, clearcoat:.7});
let M; function build(L,twist,width,awards){
  if(M) s.remove(M); const seg=420, geo=new THREE.BufferGeometry(), pos=new Float32Array(seg*2*3), idx=[];
  for(let i=0;i<seg;i++){ const t=i/(seg-1), ang=twist*t-twist/2, x=(t-.5)*L, w=width*(.6+.4*Math.sin(t*3.1415)), y=Math.sin(t*6.283*awards)*.5*awards;
    pos.set([x,  y + w/2*Math.cos(ang),  w/2*Math.sin(ang)], i*6);
    pos.set([x,  y - w/2*Math.cos(ang), -w/2*Math.sin(ang)], i*6+3);
    if(i<seg-1){ const a=2*i,b=2*i+1,c=2*i+2,d=2*i+3; idx.push(a,b,c, b,d,c); }
  }
  geo.setIndex(idx); geo.setAttribute('position', new THREE.BufferAttribute(pos,3)); geo.computeVertexNormals();
  M = new THREE.Mesh(geo,mat); s.add(M);
}
function update(followers,engPct,awards){ const L=Math.max(10, Math.log10(followers)*8), twist=(engPct/100)*Math.PI*8, width=1+(engPct/100)*6; build(L,twist,width,awards); }
update(120000,4.5,3);
(function loop(t){ if(M) M.rotation.y=t/3000; r.setSize(el.clientWidth, el.clientHeight); c.aspect=el.clientWidth/el.clientHeight; c.updateProjectionMatrix(); r.render(s,c); requestAnimationFrame(loop); })();
document.querySelector('#nilForm').addEventListener('submit',e=>{e.preventDefault(); update(+foll.value,+eng.value,+awd.value);});
</script>


⸻

4) Brand system (tokens + components)

Add once to /public/brand.css and /public/brand-components.css (if you haven’t already). This standardizes colours, typography, badges, buttons and panels across every page—including proxied sub-apps injected inside your shell.

/* /public/brand.css */
:root{ --bg:#0B0B0F; --panel:#0f172a; --ink:#E5E7EB; --muted:#9CA3AF; --line:#1F2937; --accent:#BF5700; --cyan:#9BCBEB; --font:Inter,ui-sans-serif,system-ui; }
html,body{margin:0;background:var(--bg);color:var(--ink);font-family:var(--font)}

/* /public/brand-components.css */
.panel{background:var(--panel);border:1px solid var(--line);border-radius:16px;padding:16px}
.btn{display:inline-block;padding:10px 14px;border-radius:10px;background:linear-gradient(90deg,var(--accent),var(--cyan));color:#0b0b0f;font-weight:800}
.viz canvas{display:block;width:100%;height:100%}


⸻

5) Assets you can use now

I prepared two hero-grade graphics in your colours; these are high-res and work as hero backgrounds or section breaks:
	•	Neural-swirl hero (suitable for home hero or “Platform”):
file-service://file-PT65aGVryBSQurqp6VCkHt
	•	Yin-yang flow-field (great for between sections or CTA):
file-service://file-Y5rtYtKdGsEJrkRfm2o15z

Place them under /public/assets/ and reference them in CSS or <img>. I can produce WebP + retina (2×) variants if you like.

⸻

6) Next actions (fast)
	1.	Proxy sub-apps: add the Express proxy (server.js) so /analytics, /dashboard, /demo, /status are reachable behind your shell.
	2.	Finish /login & /get-started: wire to real endpoints (or HubSpot forms).
	3.	Drop in visuals: hero shader, Pressure Stream, NIL Ribbon.
	4.	One brand: ensure every page loads /brand.css, /brand-components.css, header/footer partials, and pulls KPIs from a single /js/metrics.js.

If you want, I’ll package all of this as a branch against ahump20/blaze-intelligence-official and map the proxy env vars to your services—so you only need to set TARGET_ANALYTICS, TARGET_DASHBOARD, etc., then click “Run.”