// Blaze Intelligence Server
// Main application server for sports analytics platform

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const WebSocket = require('ws');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Security middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com", "https://cdn.tailwindcss.com"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdnjs.cloudflare.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "https://cdnjs.cloudflare.com"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'", "wss:", "https:"]
        }
    }
}));

// Enable CORS
app.use(cors({
    origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
    credentials: true
}));

// Compression
app.use(compression());

// Rate limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100 // Limit each IP to 100 requests per windowMs
});
app.use('/api', limiter);

// Body parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Static files
app.use(express.static('public'));

// API Routes
// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        version: '2.0.0'
    });
});

// Sports data endpoints
app.get('/api/sports/:sport/live', async (req, res) => {
    try {
        const { sport } = req.params;
        // Implement real API calls here
        res.json({
            sport,
            games: [],
            message: 'Live data endpoint - implement with real sports APIs'
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Player analytics
app.get('/api/players/:playerId/stats', async (req, res) => {
    try {
        const { playerId } = req.params;
        const { season = 'current' } = req.query;
        
        // Implement real player data fetching
        res.json({
            playerId,
            season,
            stats: {
                battingAverage: .285,
                homeRuns: 24,
                rbi: 78,
                war: 3.2
            },
            message: 'Player stats endpoint - implement with real data'
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// NIL valuation endpoint
app.post('/api/nil/evaluate', async (req, res) => {
    try {
        const athleteData = req.body;
        
        // Implement NIL valuation logic
        const valuation = {
            currentValue: 50000,
            projectedValue: 75000,
            factors: {
                performance: 0.4,
                socialMedia: 0.3,
                marketSize: 0.2,
                potential: 0.1
            },
            recommendations: [
                'Increase social media engagement',
                'Focus on highlight-worthy plays',
                'Build personal brand consistency'
            ]
        };
        
        res.json(valuation);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// AI analysis endpoint
app.post('/api/ai/analyze', async (req, res) => {
    try {
        const { query, model = 'chatgpt', context } = req.body;
        
        // Implement AI service calls
        const analysis = {
            model,
            query,
            response: 'AI analysis would be processed here with actual API integration',
            confidence: 0.92,
            timestamp: new Date().toISOString()
        };
        
        res.json(analysis);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Team analytics
app.get('/api/teams/:teamId/analytics', async (req, res) => {
    try {
        const { teamId } = req.params;
        
        res.json({
            teamId,
            winProbability: 0.654,
            strengthOfSchedule: 0.521,
            projectedWins: 92,
            playoffProbability: 0.876
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Youth development tracking
app.post('/api/youth/progress', async (req, res) => {
    try {
        const { athleteId, metrics } = req.body;
        
        res.json({
            athleteId,
            progressScore: 85,
            improvements: ['Speed +5%', 'Accuracy +8%'],
            nextMilestone: 'Regional Championship Qualifier',
            projectedDevelopment: 'College Ready in 2 years'
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Serve the main HTML file
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'blaze-intelligence-enhanced.html'));
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        error: 'Something went wrong!',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// Start HTTP server
const server = app.listen(PORT, () => {
    console.log(`
    🔥 Blaze Intelligence Server Running
    ====================================
    🌐 URL: http://localhost:${PORT}
    📊 Environment: ${process.env.NODE_ENV || 'development'}
    🏆 Version: 2.0.0
    ⚡ Status: Ready for championship analytics
    ====================================
    `);
});

// WebSocket server for real-time updates
const wss = new WebSocket.Server({ server });

// WebSocket connection handler
wss.on('connection', (ws) => {
    console.log('New WebSocket client connected');
    
    // Send welcome message
    ws.send(JSON.stringify({
        type: 'connection',
        message: 'Connected to Blaze Intelligence real-time stream',
        timestamp: new Date().toISOString()
    }));
    
    // Handle incoming messages
    ws.on('message', (data) => {
        try {
            const message = JSON.parse(data);
            handleWebSocketMessage(ws, message);
        } catch (error) {
            console.error('WebSocket message error:', error);
        }
    });
    
    // Handle disconnection
    ws.on('close', () => {
        console.log('WebSocket client disconnected');
    });
    
    // Handle errors
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

// WebSocket message handler
function handleWebSocketMessage(ws, message) {
    const { type, payload } = message;
    
    switch (type) {
        case 'subscribe':
            // Handle subscription to specific data streams
            console.log('Client subscribed to:', payload);
            // Implement subscription logic
            break;
            
        case 'unsubscribe':
            // Handle unsubscription
            console.log('Client unsubscribed from:', payload);
            // Implement unsubscription logic
            break;
            
        case 'request_update':
            // Send latest data
            sendLatestData(ws, payload);
            break;
            
        default:
            console.log('Unknown message type:', type);
    }
}

// Send latest data to WebSocket client
function sendLatestData(ws, dataType) {
    // Implement real data fetching
    const mockData = {
        type: 'data_update',
        dataType,
        payload: {
            timestamp: new Date().toISOString(),
            value: Math.random() * 100
        }
    };
    
    ws.send(JSON.stringify(mockData));
}

// Broadcast updates to all connected clients
function broadcastUpdate(data) {
    wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify(data));
        }
    });
}

// Simulate real-time updates (replace with actual data sources)
setInterval(() => {
    const update = {
        type: 'live_update',
        sport: 'mlb',
        data: {
            game: 'Sample Game',
            score: {
                home: Math.floor(Math.random() * 10),
                away: Math.floor(Math.random() * 10)
            },
            inning: Math.floor(Math.random() * 9) + 1,
            timestamp: new Date().toISOString()
        }
    };
    
    broadcastUpdate(update);
}, 30000); // Update every 30 seconds

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM signal received: closing HTTP server');
    server.close(() => {
        console.log('HTTP server closed');
        process.exit(0);
    });
});

module.exports = app;