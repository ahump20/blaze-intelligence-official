Security and cleanup

Remove any hard-coded keys and secrets from the repo and pages. Rotate all exposed tokens now.

Add .env and use Replit “Secrets” for runtime values.

Run a secret sweep: npx trufflehog filesystem --only-verified=false .

Replace fake data with live sources

Delete any fabricated season stats from JS. Until live feeds are wired, show “Demo data” badges and timestamps.

Implement three data adapters with caching:

MLB: official MLB Stats API (public) or your licensed provider.

NFL: your licensed provider.

College football: your licensed provider or CollegeFootballData API.

Structure: src/data/{mlb,nfl,cfb}/adapter.ts exporting getTeamSummary(), getPlayerSummary(), getLiveGames().

Add a 5-minute KV/Redis-like cache layer; on Replit use in-memory fallback with stale-while-revalidate.

Show lastUpdated, source, and confidence ranges on all widgets.

API proxy and CORS

Create /api/{mlb,nfl,cfb}/… routes on the Node server that call adapters. Do not call third-party APIs from the browser.

Lock CORS to the current Replit run URL and your production domains only.

Production build and deploy path

Keep Express only for dev. For prod, build static to dist/ and deploy on Cloudflare Pages; use a Worker as the API proxy with caching.

Verify wrangler.toml routes, add /healthz and /metrics endpoints in the Worker.

Add npm run build && npm run preview script parity with Pages.

Three.js and performance

Lazy-load Three.js and heavy visuals after first interaction.

Defer non-critical scripts, add rel=preconnect to data hosts, compress images, generate responsive <img srcset> for the founder photo.

Target Lighthouse ≥ 90 across PWA/Perf/SEO/Accessibility.

Content accuracy guardrails

Scrub copy for claims. No “trusted by pros” language.

Add league focus toggles: CFB, NFL, MLB. Default to the 2025–2026 season context.

Every stat card: team, season, asOf timestamp, source.

Monitoring and errors

Add Sentry or equivalent via env var only.

Log adapter failures with rate-limit/backoff and serve cached last-good data.

Tests and CI

Unit tests for each adapter with recorded fixtures.

Playwright e2e for homepage load, sport switcher, and live widget render.

Minimal GitHub Action for build + tests.

Accessibility and SEO

Alt text for founder image, proper landmarks, focus states.

OG/Twitter meta, JSON-LD org markup.

Hand-off artifacts

Update README.md with env keys required, run commands, and deployment steps.

Add /docs/data-contracts.md describing adapter responses.

Commands to start now:

npm i          # ensure lock is current
npm i trufflehog -D
npx trufflehog filesystem --only-verified=false .
npm run build
npm run dev


Deliverables to confirm done:

Live /api/mlb/…, /api/nfl/…, /api/cfb/… returning real data with caching.

UI shows source + timestamps, no fake numbers.

Pages deploy preview URL + Worker /healthz green.

Lighthouse report ≥90 attached.

Worked for 39 seconds

Your agent has done a good job laying the groundwork – the project builds and runs on Replit, the Express server is in place, and a polished landing page with season‑appropriate data is showing. The next steps should focus on production readiness, real data integration, and security. Specifically, I’d recommend instructing the agent to:

Secure and clean the repository
Rotate and remove any hard‑coded API keys or tokens. Store secrets in Replit’s environment variables and add .env to .gitignore. Run a secrets sweep (e.g. npx trufflehog filesystem --only-verified=false .) to ensure nothing sensitive remains in the codebase.

Replace demo stats with live feeds
Wire up actual sports data sources for college football, MLB and NFL rather than using placeholder figures. Create data‑adapter modules (one per sport) that fetch team and player stats from your licensed providers or public APIs, and cache results to avoid rate limits. Every widget should display the source and last‑updated timestamp.

Add a backend proxy layer
Expose your data adapters through /api routes on the Express server (or a Cloudflare Worker in production) so all third‑party API calls happen server‑side. Limit CORS to your production domains to protect the API keys.

Strengthen production deployment
Ensure the build works as a static bundle for deployment on Cloudflare Pages, with the Express server only for development. Add health‑check and metrics endpoints, and update README.md with deployment instructions and required environment variables.

Polish the front‑end experience
Lazy‑load the Three.js visualizations and heavy scripts to improve performance, ensure the founder headshot and other assets are optimized, and verify the site is accessible and responsive. Provide toggles for users to switch between college football, MLB and NFL views, and include clear footnotes explaining that the data reflects the 2025–2026 season.

Implement monitoring and tests
Set up error‑tracking (e.g. Sentry) via env vars, and add unit tests for the data adapters and simple end‑to‑end tests for the site. Add a basic GitHub Action to run builds and tests on each commit.

These steps will make the site secure, reliable and ready for real users, while delivering live insights for the 2025–2026 college football, MLB and NFL seasons.