0) Brand system (one source of truth)
/public/brand.css
:root{
  /* Colors */
  --bg:#0B0B0F; --panel:#0f172a; --ink:#E5E7EB;
  --muted:#9CA3AF; --line:#1F2937;
  --accent:#BF5700;        /* burnt orange */
  --accent-2:#9BCBEB;      /* cardinal blue/turquoise */

  /* Typography */
  --font: Inter, ui-sans-serif, system-ui, Segoe UI, Roboto, Helvetica, Arial;

  /* Metrics (canonical copy only) */
  --accuracy: "94.6%";
  --latency: "< 100 ms";
  --uptime: "99.9%";
  --datapoints: "2.8M+";
}

*{box-sizing:border-box}
html,body{margin:0;background:var(--bg);color:var(--ink);font-family:var(--font)}
a{color:var(--accent-2);text-decoration:none}
hr{border:none;border-top:1px solid var(--line);opacity:.6}

/public/js/metrics.js
export const METRICS = Object.freeze({
  accuracy: 0.946,            // rolling-12mo
  p95LatencyMs: 100,
  uptime90d: 99.9,
  datapoints: 2800000
});
export function injectBadges(el){
  el.innerHTML = `
  <div class="badges">
    <div class="pill"><span>Prediction Accuracy</span><b>${(METRICS.accuracy*100).toFixed(1)}%</b></div>
    <div class="pill"><span>Data Points</span><b>2.8M+</b></div>
    <div class="pill"><span>p95 Analysis Latency</span><b>&lt; 100 ms</b></div>
    <div class="pill"><span>Uptime (90d)</span><b>99.9%</b></div>
  </div>`;
}

/public/brand-components.css
.nav{display:flex;gap:20px;align-items:center;justify-content:space-between;
     padding:14px 18px;background:rgba(11,11,15,.75);border-bottom:1px solid var(--line)}
.nav a.logo{font-weight:800;letter-spacing:.3px;color:var(--ink)}
.nav .links a{color:var(--muted)} .nav .links a:hover{color:var(--accent-2)}
.footer{padding:24px;border-top:1px solid var(--line);color:var(--muted);font-size:14px}
.badges{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px}
.pill{background:#111827;border:1px solid var(--line);border-radius:14px;padding:12px}
.pill span{display:block;color:var(--muted);font-size:12px;font-weight:600}
.pill b{font-size:18px}
.btn{display:inline-block;padding:10px 14px;border-radius:10px;
     background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#0b0b0f;font-weight:800}
.panel{background:var(--panel);border:1px solid var(--line);border-radius:16px;padding:16px}

1) Shared layout + working routes
/public/partials/header.html
<header class="nav">
  <a class="logo" href="/">Blaze Intelligence</a>
  <nav class="links">
    <a href="/live-intelligence.html">Live Intelligence</a>
    <a href="/nil.html">NIL Engine</a>
    <a href="/analytics.html">Analytics</a>
    <a href="/about.html">About</a>
    <a href="/login.html">Login</a>
    <a class="btn" href="/get-started.html">Get Started</a>
  </nav>
</header>

/public/partials/footer.html
<footer class="footer">
  <div>© Blaze Intelligence • Built for coaches, athletes, and front offices</div>
  <div><a href="/privacy.html">Privacy</a> · <a href="/terms.html">Terms</a> · <a href="/sitemap.xml">Sitemap</a></div>
</footer>

/public/index.html (example skeleton)
<!doctype html><html lang="en"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Blaze Intelligence — Elite Sports Analytics</title>
<link rel="stylesheet" href="/brand.css"><link rel="stylesheet" href="/brand-components.css">
<meta name="description" content="Pressure-first, investor-grade sports intelligence.">
</head><body>
<div id="header"></div>

<main style="padding:18px">
  <section class="panel">
    <h1 style="margin:0 0 10px">Transform Data into Championships</h1>
    <p class="muted">Pressure-aware, real-time intelligence with proven accuracy and latency.</p>
    <div id="badgeStrip" style="margin-top:10px"></div>
  </section>
  <section style="margin-top:18px" class="panel">
    <h2>Live Pressure Stream</h2>
    <canvas id="pressureStream" width="1280" height="360"></canvas>
  </section>
</main>

<div id="footer"></div>

<script type="module">
  import { METRICS, injectBadges } from '/js/metrics.js';

  // include header/footer
  const loadPartial = async (id, path)=>{ const html = await fetch(path).then(r=>r.text()); document.querySelector(id).innerHTML = html; };
  await loadPartial('#header','/partials/header.html');
  await loadPartial('#footer','/partials/footer.html');

  injectBadges(document.querySelector('#badgeStrip'));

  // Live Pressure Stream (Canvas)
  const cvs = document.querySelector('#pressureStream'), ctx = cvs.getContext('2d');
  const M={l:40,r:28,t:24,b:28}; let data=[];
  const x = t => M.l + (t - window._t0) / (window._twin) * (cvs.width - M.l - M.r);
  const yWP = v => (cvs.height - M.b) - v*(cvs.height - M.t - M.b);
  const yP  = v => (cvs.height - M.b) - v*(cvs.height - M.t - M.b);

  function draw(){
    ctx.clearRect(0,0,cvs.width,cvs.height);
    // pressure area
    ctx.beginPath(); ctx.moveTo(M.l, yP(0));
    data.forEach((d,i)=>{ const X=x(d.t), Y=yP(d.p); i?ctx.lineTo(X,Y):ctx.lineTo(X,Y); });
    ctx.lineTo(x(data.at(-1)?.t||window._t0), yP(0)); ctx.closePath();
    const g = ctx.createLinearGradient(0,M.t,0,cvs.height-M.b);
    g.addColorStop(0,'rgba(191,87,0,.25)'); g.addColorStop(1,'rgba(155,203,235,.08)'); ctx.fillStyle=g; ctx.fill();

    // WP line
    ctx.strokeStyle='#9BCBEB'; ctx.lineWidth=2; ctx.beginPath();
    data.forEach((d,i)=>{ const X=x(d.t), Y=yWP(d.wp); i?ctx.lineTo(X,Y):ctx.moveTo(X,Y); }); ctx.stroke();

    // event markers
    ctx.fillStyle='#BF5700'; data.filter(d=>d.event).forEach(d=>{ ctx.beginPath(); ctx.arc(x(d.t), yWP(d.wp), 3, 0, Math.PI*2); ctx.fill(); });
  }

  // Rolling window 18 min
  window._twin = 18*60*1000; window._t0 = Date.now();

  // Use SSE if available; else poll (works in Replit)
  const ev = new EventSource('/api/game/pressure-stream'); // implement in server.js
  ev.onmessage = e=>{
    const d = JSON.parse(e.data); data.push(d);
    const tMax = d.t; window._t0 = tMax - window._twin; data = data.filter(x=>x.t >= window._t0);
    draw();
  };
</script>
</body></html>

Working auth/CTA pages

Create /public/login.html and /public/get-started.html (simple forms that post to your real auth API or HubSpot form). This removes dead ends and standardizes conversion.

2) Mirror and integrate subdomains/features from http://localhost:8090/

You won’t run localhost in production, so add a reverse-proxy that exposes those sub-apps/features under your Replit domain while keeping the navigation unified.

/server.js (Express + proxy)
import express from 'express';
import { createProxyMiddleware } from 'http-proxy-middleware';

const app = express();
app.use(express.static('public'));

// Map subdomains/features discovered under http://localhost:8090/
// Edit TARGET_* to match your real ports or remote services.
const TARGET_ANALYTICS = process.env.TARGET_ANALYTICS || 'http://localhost:8090/analytics';
const TARGET_DASH = process.env.TARGET_DASH || 'http://localhost:8090/dashboard';
const TARGET_DEMO = process.env.TARGET_DEMO || 'http://localhost:8090/demo';
const TARGET_STATUS = process.env.TARGET_STATUS || 'http://localhost:8090/status';

app.use('/analytics', createProxyMiddleware({ target: TARGET_ANALYTICS, changeOrigin: true, pathRewrite:{'^/analytics':''} }));
app.use('/dashboard', createProxyMiddleware({ target: TARGET_DASH, changeOrigin: true, pathRewrite:{'^/dashboard':''} }));
app.use('/demo',      createProxyMiddleware({ target: TARGET_DEMO, changeOrigin: true, pathRewrite:{'^/demo':''} }));
app.use('/status',    createProxyMiddleware({ target: TARGET_STATUS, changeOrigin: true, pathRewrite:{'^/status':''} }));

// SSE endpoint for Pressure Stream (mock or real)
app.get('/api/game/pressure-stream', (req,res)=>{
  res.setHeader('Content-Type','text/event-stream');
  res.setHeader('Cache-Control','no-cache'); res.setHeader('Connection','keep-alive');
  const send = (o)=>res.write(`data: ${JSON.stringify(o)}\n\n`);
  let t = Date.now(); let wp=0.5, p=0.2;
  const iv = setInterval(()=>{
    t += 2000;
    // synthetic but realistic dynamics; replace with provider
    const drift = (Math.random()-.5)*0.04; wp = Math.max(0, Math.min(1, wp + drift*(1+p)));
    p = Math.max(0, Math.min(1, p + (Math.random()-.5)*0.1));
    const event = Math.random()<0.08 ? {code:'PLAY',label:'High-leverage',team: Math.random()>.5?'A':'B'} : undefined;
    send({t, wp, p, event});
  }, 1000);
  req.on('close', ()=>clearInterval(iv));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=>console.log('Blaze server on', PORT));


Why this matters: you keep one branded shell (header/footer, CSS, metrics) while surfacing all the “subdomain apps” behind clean paths (/analytics, /dashboard, /demo, /status). When you move away from localhost, just switch TARGET_* to the real internal URLs.

3) Brand alignment checklist (apply across all pages)

Typography & colors only from /brand.css.

Header/Footer partials on every page (no orphan pages).

Canonical metrics from /js/metrics.js—no hard-coded 96% anywhere.

Route health: /login, /get-started, /privacy, /terms, /sitemap.xml all exist.

SEO: unique <title>, <meta name="description">, OpenGraph tags per page.

Accessibility: keyboard focus states, alt text, labels, reduced-motion fallback.

Performance: IntersectionObserver to lazy-init heavy visualizations; avoid large bundle.

4) Add platform pages quickly

/public/live-intelligence.html – Pressure Heatmap + KPI rings; content framed for coaches.

/public/nil.html – NIL Ribbon (Three.js) bound to followers/engagement/awards form.

/public/analytics.html – investor-grade dashboards (accuracy/latency, uptime, data freshness).

/public/about.html – story, compliance, consent, and data ethics.

Each page: import /brand.css, /brand-components.css, include header/footer partials, and mount the respective visualization module.

5) Compliance & consent (must-have)

Explicit consent for any biometric or image-based analysis; summarize in /about.html and link from every page footer.

Store consent decisions server-side; log timestamp and scope to a lightweight DB or KV.

6) Deploy steps (Replit)

Add files under /public, /public/partials, /public/js.

Add server.js and install:

npm i express http-proxy-middleware


Set Replit run command to:

node server.js


Verify routes: /, /analytics, /dashboard, /demo, /status, /api/game/pressure-stream.

7) Optional: quick site map & robots
/public/robots.txt
User-agent: *
Allow: /
Sitemap: /sitemap.xml

/public/sitemap.xml
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
 <url><loc>https://YOUR-REPLIT-DOMAIN/</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/live-intelligence.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/nil.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/analytics.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/get-started.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/login.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/about.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/privacy.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/terms.html</loc></url>
</urlset>

8) Acceptance criteria

No dead links; Login/Get-Started work and point to real endpoints.

Single visual identity via tokens in /brand.css.

All embedded sub-apps reachable through /analytics, /dashboard, /demo, /status with header/footer shell.

Canonical metrics rendered from one script (/js/metrics.js).

Pressure Stream chart live (SSE) on home or live page.

TTFV ≤ 3 s; sustained 60 fps on charts/3-D modules on a modern laptop.

If you want, I’ll package this as a ready-to-merge branch (with sample data and all pages wired) and map your TARGET_* proxy env vars to the services you’re hosting behind http://localhost:8090/.

----

Answer: ship a single, branded system across all pages, wire working routes, and mirror subdomains you referenced via a clean proxy layer. Below is an execution-ready drop that you can paste into your Replit project to upgrade `https://35179f3c-00f3-409f-95da-bed1c6ba912c-00-3tftlc85yrdac.spock.replit.dev/` and align it with the domains/features/subdomains you’re aggregating from `http://localhost:8090/`.

---

## 0) Brand system (one source of truth)

### /public/brand.css

```css
:root{
  /* Colors */
  --bg:#0B0B0F; --panel:#0f172a; --ink:#E5E7EB;
  --muted:#9CA3AF; --line:#1F2937;
  --accent:#BF5700;        /* burnt orange */
  --accent-2:#9BCBEB;      /* cardinal blue/turquoise */

  /* Typography */
  --font: Inter, ui-sans-serif, system-ui, Segoe UI, Roboto, Helvetica, Arial;

  /* Metrics (canonical copy only) */
  --accuracy: "94.6%";
  --latency: "< 100 ms";
  --uptime: "99.9%";
  --datapoints: "2.8M+";
}

*{box-sizing:border-box}
html,body{margin:0;background:var(--bg);color:var(--ink);font-family:var(--font)}
a{color:var(--accent-2);text-decoration:none}
hr{border:none;border-top:1px solid var(--line);opacity:.6}
```

### /public/js/metrics.js

```js
export const METRICS = Object.freeze({
  accuracy: 0.946,            // rolling-12mo
  p95LatencyMs: 100,
  uptime90d: 99.9,
  datapoints: 2800000
});
export function injectBadges(el){
  el.innerHTML = `
  <div class="badges">
    <div class="pill"><span>Prediction Accuracy</span><b>${(METRICS.accuracy*100).toFixed(1)}%</b></div>
    <div class="pill"><span>Data Points</span><b>2.8M+</b></div>
    <div class="pill"><span>p95 Analysis Latency</span><b>&lt; 100 ms</b></div>
    <div class="pill"><span>Uptime (90d)</span><b>99.9%</b></div>
  </div>`;
}
```

### /public/brand-components.css

```css
.nav{display:flex;gap:20px;align-items:center;justify-content:space-between;
     padding:14px 18px;background:rgba(11,11,15,.75);border-bottom:1px solid var(--line)}
.nav a.logo{font-weight:800;letter-spacing:.3px;color:var(--ink)}
.nav .links a{color:var(--muted)} .nav .links a:hover{color:var(--accent-2)}
.footer{padding:24px;border-top:1px solid var(--line);color:var(--muted);font-size:14px}
.badges{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px}
.pill{background:#111827;border:1px solid var(--line);border-radius:14px;padding:12px}
.pill span{display:block;color:var(--muted);font-size:12px;font-weight:600}
.pill b{font-size:18px}
.btn{display:inline-block;padding:10px 14px;border-radius:10px;
     background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#0b0b0f;font-weight:800}
.panel{background:var(--panel);border:1px solid var(--line);border-radius:16px;padding:16px}
```

---

## 1) Shared layout + working routes

### /public/partials/header.html

```html
<header class="nav">
  <a class="logo" href="/">Blaze Intelligence</a>
  <nav class="links">
    <a href="/live-intelligence.html">Live Intelligence</a>
    <a href="/nil.html">NIL Engine</a>
    <a href="/analytics.html">Analytics</a>
    <a href="/about.html">About</a>
    <a href="/login.html">Login</a>
    <a class="btn" href="/get-started.html">Get Started</a>
  </nav>
</header>
```

### /public/partials/footer.html

```html
<footer class="footer">
  <div>© Blaze Intelligence • Built for coaches, athletes, and front offices</div>
  <div><a href="/privacy.html">Privacy</a> · <a href="/terms.html">Terms</a> · <a href="/sitemap.xml">Sitemap</a></div>
</footer>
```

### /public/index.html (example skeleton)

```html
<!doctype html><html lang="en"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Blaze Intelligence — Elite Sports Analytics</title>
<link rel="stylesheet" href="/brand.css"><link rel="stylesheet" href="/brand-components.css">
<meta name="description" content="Pressure-first, investor-grade sports intelligence.">
</head><body>
<div id="header"></div>

<main style="padding:18px">
  <section class="panel">
    <h1 style="margin:0 0 10px">Transform Data into Championships</h1>
    <p class="muted">Pressure-aware, real-time intelligence with proven accuracy and latency.</p>
    <div id="badgeStrip" style="margin-top:10px"></div>
  </section>
  <section style="margin-top:18px" class="panel">
    <h2>Live Pressure Stream</h2>
    <canvas id="pressureStream" width="1280" height="360"></canvas>
  </section>
</main>

<div id="footer"></div>

<script type="module">
  import { METRICS, injectBadges } from '/js/metrics.js';

  // include header/footer
  const loadPartial = async (id, path)=>{ const html = await fetch(path).then(r=>r.text()); document.querySelector(id).innerHTML = html; };
  await loadPartial('#header','/partials/header.html');
  await loadPartial('#footer','/partials/footer.html');

  injectBadges(document.querySelector('#badgeStrip'));

  // Live Pressure Stream (Canvas)
  const cvs = document.querySelector('#pressureStream'), ctx = cvs.getContext('2d');
  const M={l:40,r:28,t:24,b:28}; let data=[];
  const x = t => M.l + (t - window._t0) / (window._twin) * (cvs.width - M.l - M.r);
  const yWP = v => (cvs.height - M.b) - v*(cvs.height - M.t - M.b);
  const yP  = v => (cvs.height - M.b) - v*(cvs.height - M.t - M.b);

  function draw(){
    ctx.clearRect(0,0,cvs.width,cvs.height);
    // pressure area
    ctx.beginPath(); ctx.moveTo(M.l, yP(0));
    data.forEach((d,i)=>{ const X=x(d.t), Y=yP(d.p); i?ctx.lineTo(X,Y):ctx.lineTo(X,Y); });
    ctx.lineTo(x(data.at(-1)?.t||window._t0), yP(0)); ctx.closePath();
    const g = ctx.createLinearGradient(0,M.t,0,cvs.height-M.b);
    g.addColorStop(0,'rgba(191,87,0,.25)'); g.addColorStop(1,'rgba(155,203,235,.08)'); ctx.fillStyle=g; ctx.fill();

    // WP line
    ctx.strokeStyle='#9BCBEB'; ctx.lineWidth=2; ctx.beginPath();
    data.forEach((d,i)=>{ const X=x(d.t), Y=yWP(d.wp); i?ctx.lineTo(X,Y):ctx.moveTo(X,Y); }); ctx.stroke();

    // event markers
    ctx.fillStyle='#BF5700'; data.filter(d=>d.event).forEach(d=>{ ctx.beginPath(); ctx.arc(x(d.t), yWP(d.wp), 3, 0, Math.PI*2); ctx.fill(); });
  }

  // Rolling window 18 min
  window._twin = 18*60*1000; window._t0 = Date.now();

  // Use SSE if available; else poll (works in Replit)
  const ev = new EventSource('/api/game/pressure-stream'); // implement in server.js
  ev.onmessage = e=>{
    const d = JSON.parse(e.data); data.push(d);
    const tMax = d.t; window._t0 = tMax - window._twin; data = data.filter(x=>x.t >= window._t0);
    draw();
  };
</script>
</body></html>
```

### Working auth/CTA pages

Create **/public/login.html** and **/public/get-started.html** (simple forms that post to your real auth API or HubSpot form). This removes dead ends and standardizes conversion.

---

## 2) Mirror and integrate subdomains/features from `http://localhost:8090/`

You won’t run localhost in production, so add a **reverse-proxy** that exposes those sub-apps/features under your Replit domain while keeping the navigation unified.

### /server.js (Express + proxy)

```js
import express from 'express';
import { createProxyMiddleware } from 'http-proxy-middleware';

const app = express();
app.use(express.static('public'));

// Map subdomains/features discovered under http://localhost:8090/
// Edit TARGET_* to match your real ports or remote services.
const TARGET_ANALYTICS = process.env.TARGET_ANALYTICS || 'http://localhost:8090/analytics';
const TARGET_DASH = process.env.TARGET_DASH || 'http://localhost:8090/dashboard';
const TARGET_DEMO = process.env.TARGET_DEMO || 'http://localhost:8090/demo';
const TARGET_STATUS = process.env.TARGET_STATUS || 'http://localhost:8090/status';

app.use('/analytics', createProxyMiddleware({ target: TARGET_ANALYTICS, changeOrigin: true, pathRewrite:{'^/analytics':''} }));
app.use('/dashboard', createProxyMiddleware({ target: TARGET_DASH, changeOrigin: true, pathRewrite:{'^/dashboard':''} }));
app.use('/demo',      createProxyMiddleware({ target: TARGET_DEMO, changeOrigin: true, pathRewrite:{'^/demo':''} }));
app.use('/status',    createProxyMiddleware({ target: TARGET_STATUS, changeOrigin: true, pathRewrite:{'^/status':''} }));

// SSE endpoint for Pressure Stream (mock or real)
app.get('/api/game/pressure-stream', (req,res)=>{
  res.setHeader('Content-Type','text/event-stream');
  res.setHeader('Cache-Control','no-cache'); res.setHeader('Connection','keep-alive');
  const send = (o)=>res.write(`data: ${JSON.stringify(o)}\n\n`);
  let t = Date.now(); let wp=0.5, p=0.2;
  const iv = setInterval(()=>{
    t += 2000;
    // synthetic but realistic dynamics; replace with provider
    const drift = (Math.random()-.5)*0.04; wp = Math.max(0, Math.min(1, wp + drift*(1+p)));
    p = Math.max(0, Math.min(1, p + (Math.random()-.5)*0.1));
    const event = Math.random()<0.08 ? {code:'PLAY',label:'High-leverage',team: Math.random()>.5?'A':'B'} : undefined;
    send({t, wp, p, event});
  }, 1000);
  req.on('close', ()=>clearInterval(iv));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=>console.log('Blaze server on', PORT));
```

**Why this matters:** you keep one branded shell (header/footer, CSS, metrics) while surfacing all the “subdomain apps” behind clean paths (`/analytics`, `/dashboard`, `/demo`, `/status`). When you move away from localhost, just switch `TARGET_*` to the real internal URLs.

---

## 3) Brand alignment checklist (apply across all pages)

1. **Typography & colors** only from `/brand.css`.
2. **Header/Footer partials** on every page (no orphan pages).
3. **Canonical metrics** from `/js/metrics.js`—no hard-coded 96% anywhere.
4. **Route health:** `/login`, `/get-started`, `/privacy`, `/terms`, `/sitemap.xml` all exist.
5. **SEO:** unique `<title>`, `<meta name="description">`, OpenGraph tags per page.
6. **Accessibility:** keyboard focus states, alt text, labels, reduced-motion fallback.
7. **Performance:** IntersectionObserver to lazy-init heavy visualizations; avoid large bundle.

---

## 4) Add platform pages quickly

* **/public/live-intelligence.html** – Pressure Heatmap + KPI rings; content framed for coaches.
* **/public/nil.html** – NIL Ribbon (Three.js) bound to followers/engagement/awards form.
* **/public/analytics.html** – investor-grade dashboards (accuracy/latency, uptime, data freshness).
* **/public/about.html** – story, compliance, consent, and data ethics.

Each page: import `/brand.css`, `/brand-components.css`, include header/footer partials, and mount the respective visualization module.

---

## 5) Compliance & consent (must-have)

* **Explicit consent** for any biometric or image-based analysis; summarize in `/about.html` and link from every page footer.
* Store consent decisions server-side; log timestamp and scope to a lightweight DB or KV.

---

## 6) Deploy steps (Replit)

1. Add files under `/public`, `/public/partials`, `/public/js`.
2. Add `server.js` and install:

   ```
   npm i express http-proxy-middleware
   ```
3. Set Replit run command to:

   ```
   node server.js
   ```
4. Verify routes: `/`, `/analytics`, `/dashboard`, `/demo`, `/status`, `/api/game/pressure-stream`.

---

## 7) Optional: quick site map & robots

### /public/robots.txt

```
User-agent: *
Allow: /
Sitemap: /sitemap.xml
```

### /public/sitemap.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
 <url><loc>https://YOUR-REPLIT-DOMAIN/</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/live-intelligence.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/nil.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/analytics.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/get-started.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/login.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/about.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/privacy.html</loc></url>
 <url><loc>https://YOUR-REPLIT-DOMAIN/terms.html</loc></url>
</urlset>
```

---

## 8) Acceptance criteria

* **No dead links**; Login/Get-Started work and point to real endpoints.
* **Single visual identity** via tokens in `/brand.css`.
* **All embedded sub-apps** reachable through `/analytics`, `/dashboard`, `/demo`, `/status` with header/footer shell.
* **Canonical metrics** rendered from one script (`/js/metrics.js`).
* **Pressure Stream** chart live (SSE) on home or live page.
* **TTFV ≤ 3 s;** sustained 60 fps on charts/3-D modules on a modern laptop.

---

If you want, I’ll package this as a ready-to-merge branch (with sample data and all pages wired) and map your `TARGET_*` proxy env vars to the services you’re hosting behind `http://localhost:8090/`.


I tried to load `https://35179f3c-00f3-409f-95da-bed1c6ba912c-00-3tftlc85yrdac.spock.replit.dev/`, but Replit returned “we couldn’t reach this app,” suggesting the container isn’t running.  That means I can’t see the live layout, so I can’t directly modify the running site.  However, I’ve integrated the guidance from all three research plans and prepared a **comprehensive refactor** you can drop into your project (or any subdomain) once it’s up, to align the brand, unify the navigation, and integrate sub‑apps behind clean routes:

1. **Centralised design system** – create a `/public/brand.css` and `/public/brand-components.css` defining colours (burnt‑orange #BF5700, cardinal blue #9BCBEB, dark backgrounds), typography (Inter), and reusable components (buttons, pills, cards, nav, footer).  This ensures all pages, whether from the main app or embedded sub‑apps, share the same look and feel.

2. **Canonical metrics module** – export a single JS module `/public/js/metrics.js` that defines and injects the platform’s core KPIs (94.6 % accuracy, <100 ms p95 latency, 99.9 % uptime).  Use it on every page instead of hard‑coding numbers, so you never see conflicting “96 %” claims again.

3. **Shared header and footer** – put your nav and footer into `/public/partials/header.html` and `/public/partials/footer.html`, then use a small script to inject them into every page.  This standardises navigation (Home, Live Intelligence, NIL Engine, Analytics, About, Login/Get Started) and ensures legal pages (Privacy, Terms) are always available.

4. **Working login and Get Started pages** – add `/login.html` and `/get-started.html` so the links aren’t dead.  Point them to your real auth endpoints or HubSpot forms.

5. **Reverse proxy integration** – since localhost:8090 presumably hosts sub‑apps (analytics, dashboard, demo, status), add an Express server (`server.js`) that serves your static `public/` directory and proxies `/analytics`, `/dashboard`, `/demo` and `/status` to the corresponding services.  This lets users access those features via clean paths under the same domain without breaking branding.

6. **Live Pressure Stream** – implement a Server‑Sent Events endpoint (`/api/game/pressure-stream`) in `server.js` that emits synthetic or real win‑probability and pressure ticks.  Use a canvas chart in your homepage (`index.html`) to visualise live momentum swings; this implements the “pressure‑focused” insights recommended in your docs while being lightweight enough for Replit.

7. **Brand alignment checklist** – for each page: import brand styles; include header/footer partials; display the canonical metrics; ensure accessible alt text; add meta tags for SEO; and verify there are no broken links.

8. **Deployment** – copy all files to your Replit project, run `npm install express http-proxy-middleware`, then start the server (`node server.js`).  Replace `TARGET_*` environment variables with the URLs of your real sub‑services.  The proxy will merge everything under one branded shell.

By following this refactor you can bring consistent design and functionality across all your sites and subdomains, even if they run on different back‑ends.  This lays the groundwork for layering in the advanced visual modules (Pressure Heatmaps, NIL Ribbon, Chemistry Graphs) once the core site is stable and reachable.