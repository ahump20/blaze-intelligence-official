/**
 * Blaze Intelligence Accessibility System
 * WCAG 2.2 AA compliance with sports-specific adaptations
 */

class AccessibilitySystem {
    constructor() {
        this.wcagLevel = 'AA'; // Target compliance level
        this.preferences = this.loadPreferences();
        this.violations = [];
        this.focusTracker = null;
        this.announcementQueue = [];
        
        // Sports-specific accessibility features
        this.sportsAdaptations = {
            colorBlindness: {
                patterns: true,        // Use patterns in addition to colors
                highContrast: true,    // High contrast mode for charts
                alternativeText: true  // Descriptive text for color-coded data
            },
            motionSensitivity: {
                reducedMotion: false,  // Respect prefers-reduced-motion
                pauseAnimations: false, // Allow pausing chart animations
                staticAlternatives: true // Provide static versions of dynamic content
            },
            cognitiveLoad: {
                simplifiedView: false, // Simplified dashboard option
                progressIndicators: true, // Clear progress for multi-step processes
                contextHelp: true      // Contextual help for complex sports terms
            }
        };
        
        this.keyboardNavigation = {
            enabled: true,
            skipLinks: true,
            focusManagement: true,
            customShortcuts: {
                'Alt+D': 'dashboard',
                'Alt+C': 'coach',
                'Alt+S': 'stats',
                'Alt+H': 'help'
            }
        };
        
        this.init();
    }
    
    init() {
        this.setupAccessibilityFeatures();
        this.addSkipLinks();
        this.enhanceKeyboardNavigation();
        this.setupScreenReaderSupport();
        this.addAccessibilityControls();
        this.monitorCompliance();
        this.bindEvents();
        
        console.log('♿ Accessibility system initialized - WCAG 2.2 AA compliant');
    }
    
    loadPreferences() {
        try {
            const stored = localStorage.getItem('blaze_accessibility_prefs');
            return stored ? JSON.parse(stored) : this.getDefaultPreferences();
        } catch (error) {
            console.warn('Failed to load accessibility preferences:', error);
            return this.getDefaultPreferences();
        }
    }
    
    getDefaultPreferences() {
        return {
            highContrast: false,
            largeText: false,
            reducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,
            screenReader: false,
            keyboardOnly: false,
            colorBlindAssist: false,
            simplifiedUI: false,
            autoplay: true,
            focusIndicators: 'enhanced',
            announcements: 'important'
        };
    }
    
    setupAccessibilityFeatures() {
        // Add ARIA landmarks
        this.addLandmarks();
        
        // Enhance focus visibility
        this.enhanceFocusIndicators();
        
        // Add live regions for dynamic content
        this.setupLiveRegions();
        
        // Color contrast fixes
        this.ensureColorContrast();
        
        // Font size controls
        this.setupFontSizeControls();
        
        // Motion controls
        this.setupMotionControls();
    }
    
    addLandmarks() {
        // Add main landmark if missing
        let main = document.querySelector('main');
        if (!main) {
            main = document.createElement('main');
            main.setAttribute('role', 'main');
            main.setAttribute('aria-label', 'Main content');
            
            // Wrap existing content
            const content = document.querySelector('.dashboard-content') || document.body.children[0];
            if (content) {
                content.parentNode.insertBefore(main, content);
                main.appendChild(content);
            }
        }
        
        // Add navigation landmark
        const nav = document.querySelector('nav, .nav-links');
        if (nav && !nav.getAttribute('role')) {
            nav.setAttribute('role', 'navigation');
            nav.setAttribute('aria-label', 'Main navigation');
        }
        
        // Add banner landmark
        const header = document.querySelector('header');
        if (header && !header.getAttribute('role')) {
            header.setAttribute('role', 'banner');
            header.setAttribute('aria-label', 'Site header');
        }
        
        // Add contentinfo landmark
        const footer = document.querySelector('footer');
        if (footer && !footer.getAttribute('role')) {
            footer.setAttribute('role', 'contentinfo');
            footer.setAttribute('aria-label', 'Site footer');
        }
        
        // Add complementary landmarks for sidebars
        document.querySelectorAll('.sidebar, .widget-area').forEach((sidebar, index) => {\n            sidebar.setAttribute('role', 'complementary');\n            sidebar.setAttribute('aria-label', `Sidebar ${index + 1}`);\n        });\n    }\n    \n    addSkipLinks() {\n        const skipLinks = document.createElement('div');\n        skipLinks.className = 'skip-links';\n        skipLinks.innerHTML = `\n            <a href=\"#main-content\" class=\"skip-link\">Skip to main content</a>\n            <a href=\"#navigation\" class=\"skip-link\">Skip to navigation</a>\n            <a href=\"#search\" class=\"skip-link\">Skip to search</a>\n        `;\n        \n        document.body.insertBefore(skipLinks, document.body.firstChild);\n        \n        // Add skip link styles\n        const style = document.createElement('style');\n        style.textContent = `\n            .skip-links {\n                position: absolute;\n                top: -100px;\n                left: 0;\n                z-index: 10000;\n            }\n            \n            .skip-link {\n                position: absolute;\n                top: -100px;\n                left: 8px;\n                padding: 8px 16px;\n                background: #000;\n                color: #fff;\n                text-decoration: none;\n                border-radius: 0 0 8px 8px;\n                font-weight: 600;\n                z-index: 10001;\n                transition: top 0.3s ease;\n            }\n            \n            .skip-link:focus {\n                top: 0;\n            }\n            \n            .skip-link:hover {\n                background: #BF5700;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    enhanceFocusIndicators() {\n        const style = document.createElement('style');\n        style.textContent = `\n            /* Enhanced focus indicators */\n            *:focus {\n                outline: 3px solid #BF5700 !important;\n                outline-offset: 2px !important;\n                box-shadow: 0 0 0 5px rgba(191, 87, 0, 0.3) !important;\n            }\n            \n            /* High contrast focus for interactive elements */\n            button:focus,\n            input:focus,\n            select:focus,\n            textarea:focus,\n            a:focus {\n                outline: 4px solid #BF5700 !important;\n                outline-offset: 2px !important;\n                background: rgba(191, 87, 0, 0.1) !important;\n            }\n            \n            /* Focus within for containers */\n            .chart-container:focus-within,\n            .dashboard-widget:focus-within {\n                outline: 2px solid #BF5700;\n                outline-offset: 4px;\n            }\n            \n            /* Keyboard-only focus enhancement */\n            .js-keyboard-user *:focus {\n                outline-width: 4px !important;\n                box-shadow: 0 0 0 7px rgba(191, 87, 0, 0.4) !important;\n            }\n        `;\n        \n        document.head.appendChild(style);\n        \n        // Track keyboard usage\n        this.trackKeyboardUsage();\n    }\n    \n    trackKeyboardUsage() {\n        let keyboardUser = false;\n        \n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Tab') {\n                keyboardUser = true;\n                document.body.classList.add('js-keyboard-user');\n            }\n        });\n        \n        document.addEventListener('mousedown', () => {\n            keyboardUser = false;\n            document.body.classList.remove('js-keyboard-user');\n        });\n    }\n    \n    setupLiveRegions() {\n        // Status announcements (polite)\n        const statusRegion = document.createElement('div');\n        statusRegion.id = 'status-announcements';\n        statusRegion.setAttribute('aria-live', 'polite');\n        statusRegion.setAttribute('aria-atomic', 'true');\n        statusRegion.className = 'sr-only';\n        document.body.appendChild(statusRegion);\n        \n        // Alert announcements (assertive)\n        const alertRegion = document.createElement('div');\n        alertRegion.id = 'alert-announcements';\n        alertRegion.setAttribute('aria-live', 'assertive');\n        alertRegion.setAttribute('aria-atomic', 'true');\n        alertRegion.className = 'sr-only';\n        document.body.appendChild(alertRegion);\n        \n        // Progress announcements\n        const progressRegion = document.createElement('div');\n        progressRegion.id = 'progress-announcements';\n        progressRegion.setAttribute('aria-live', 'polite');\n        progressRegion.setAttribute('aria-atomic', 'false');\n        progressRegion.className = 'sr-only';\n        document.body.appendChild(progressRegion);\n        \n        // Add screen reader only class\n        const srOnlyStyle = document.createElement('style');\n        srOnlyStyle.textContent = `\n            .sr-only {\n                position: absolute !important;\n                width: 1px !important;\n                height: 1px !important;\n                padding: 0 !important;\n                margin: -1px !important;\n                overflow: hidden !important;\n                clip: rect(0, 0, 0, 0) !important;\n                white-space: nowrap !important;\n                border: 0 !important;\n            }\n        `;\n        \n        document.head.appendChild(srOnlyStyle);\n    }\n    \n    ensureColorContrast() {\n        // Add high contrast mode styles\n        const contrastStyle = document.createElement('style');\n        contrastStyle.id = 'high-contrast-styles';\n        contrastStyle.textContent = `\n            .high-contrast {\n                --primary: #000000;\n                --secondary: #FFFFFF;\n                --accent: #FFFF00;\n                --background: #FFFFFF;\n                --text: #000000;\n                --border: #000000;\n            }\n            \n            .high-contrast * {\n                background: var(--background) !important;\n                color: var(--text) !important;\n                border-color: var(--border) !important;\n            }\n            \n            .high-contrast button,\n            .high-contrast .btn {\n                background: var(--text) !important;\n                color: var(--background) !important;\n                border: 2px solid var(--text) !important;\n            }\n            \n            .high-contrast a {\n                color: #0000EE !important;\n                text-decoration: underline !important;\n            }\n            \n            .high-contrast .chart-positive {\n                background: #008000 !important;\n                color: #FFFFFF !important;\n            }\n            \n            .high-contrast .chart-negative {\n                background: #FF0000 !important;\n                color: #FFFFFF !important;\n            }\n        `;\n        \n        document.head.appendChild(contrastStyle);\n    }\n    \n    setupFontSizeControls() {\n        const fontStyle = document.createElement('style');\n        fontStyle.id = 'font-size-controls';\n        fontStyle.textContent = `\n            .large-text {\n                font-size: 1.25em !important;\n                line-height: 1.6 !important;\n            }\n            \n            .large-text h1 { font-size: 2.5em !important; }\n            .large-text h2 { font-size: 2.25em !important; }\n            .large-text h3 { font-size: 2em !important; }\n            .large-text h4 { font-size: 1.75em !important; }\n            .large-text h5 { font-size: 1.5em !important; }\n            .large-text h6 { font-size: 1.25em !important; }\n            \n            .large-text .btn,\n            .large-text button {\n                padding: 16px 24px !important;\n                font-size: 1.125em !important;\n            }\n            \n            .large-text input,\n            .large-text select,\n            .large-text textarea {\n                padding: 12px !important;\n                font-size: 1.125em !important;\n            }\n        `;\n        \n        document.head.appendChild(fontStyle);\n    }\n    \n    setupMotionControls() {\n        const motionStyle = document.createElement('style');\n        motionStyle.id = 'motion-controls';\n        motionStyle.textContent = `\n            @media (prefers-reduced-motion: reduce) {\n                *,\n                *::before,\n                *::after {\n                    animation-duration: 0.01ms !important;\n                    animation-iteration-count: 1 !important;\n                    transition-duration: 0.01ms !important;\n                }\n            }\n            \n            .reduced-motion * {\n                animation: none !important;\n                transition: none !important;\n                transform: none !important;\n            }\n            \n            .reduced-motion .chart-animation {\n                animation: none !important;\n            }\n            \n            /* Pause button for animations */\n            .animation-controls {\n                position: fixed;\n                bottom: 20px;\n                left: 20px;\n                z-index: 1000;\n                background: rgba(0, 0, 0, 0.8);\n                border-radius: 8px;\n                padding: 8px;\n            }\n            \n            .pause-animations {\n                background: #BF5700;\n                color: white;\n                border: none;\n                padding: 8px 12px;\n                border-radius: 4px;\n                cursor: pointer;\n            }\n        `;\n        \n        document.head.appendChild(motionStyle);\n        \n        // Add animation pause control\n        this.addAnimationControls();\n    }\n    \n    addAnimationControls() {\n        const controls = document.createElement('div');\n        controls.className = 'animation-controls';\n        controls.innerHTML = `\n            <button class=\"pause-animations\" aria-label=\"Pause all animations\">\n                ⏸️ Pause Animations\n            </button>\n        `;\n        \n        document.body.appendChild(controls);\n        \n        const pauseBtn = controls.querySelector('.pause-animations');\n        let paused = false;\n        \n        pauseBtn.addEventListener('click', () => {\n            paused = !paused;\n            if (paused) {\n                document.body.classList.add('reduced-motion');\n                pauseBtn.innerHTML = '▶️ Resume Animations';\n                pauseBtn.setAttribute('aria-label', 'Resume all animations');\n                this.announce('Animations paused', 'status');\n            } else {\n                document.body.classList.remove('reduced-motion');\n                pauseBtn.innerHTML = '⏸️ Pause Animations';\n                pauseBtn.setAttribute('aria-label', 'Pause all animations');\n                this.announce('Animations resumed', 'status');\n            }\n        });\n    }\n    \n    enhanceKeyboardNavigation() {\n        // Add tabindex to interactive elements that need it\n        document.querySelectorAll('.chart, .widget, .dashboard-card').forEach((el, index) => {\n            if (!el.hasAttribute('tabindex')) {\n                el.setAttribute('tabindex', '0');\n                el.setAttribute('role', 'region');\n                el.setAttribute('aria-label', `Interactive content ${index + 1}`);\n            }\n        });\n        \n        // Custom keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.altKey) {\n                this.handleKeyboardShortcuts(e);\n            }\n            \n            // Escape key handling\n            if (e.key === 'Escape') {\n                this.handleEscape(e);\n            }\n        });\n        \n        // Roving tabindex for complex widgets\n        this.setupRovingTabindex();\n    }\n    \n    handleKeyboardShortcuts(e) {\n        const shortcuts = this.keyboardNavigation.customShortcuts;\n        const combo = `Alt+${e.key.toUpperCase()}`;\n        \n        if (shortcuts[combo]) {\n            e.preventDefault();\n            this.navigateToSection(shortcuts[combo]);\n            this.announce(`Navigated to ${shortcuts[combo]}`, 'status');\n        }\n    }\n    \n    handleEscape(e) {\n        // Close any open modals, dropdowns, or overlays\n        const activeModal = document.querySelector('.modal.active, .dropdown.open, .overlay.visible');\n        if (activeModal) {\n            activeModal.classList.remove('active', 'open', 'visible');\n            this.announce('Dialog closed', 'status');\n            \n            // Return focus to trigger element\n            const trigger = document.querySelector('[aria-expanded=\"true\"]');\n            if (trigger) {\n                trigger.focus();\n                trigger.setAttribute('aria-expanded', 'false');\n            }\n        }\n    }\n    \n    setupRovingTabindex() {\n        // For chart controls and complex widgets\n        document.querySelectorAll('.chart-controls, .widget-controls').forEach(container => {\n            const controls = container.querySelectorAll('button, [tabindex]');\n            if (controls.length === 0) return;\n            \n            // Set up roving tabindex\n            controls[0].setAttribute('tabindex', '0');\n            for (let i = 1; i < controls.length; i++) {\n                controls[i].setAttribute('tabindex', '-1');\n            }\n            \n            container.addEventListener('keydown', (e) => {\n                if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n                    e.preventDefault();\n                    this.moveRovingFocus(controls, e.key === 'ArrowRight' ? 1 : -1);\n                }\n            });\n        });\n    }\n    \n    moveRovingFocus(controls, direction) {\n        const currentIndex = Array.from(controls).findIndex(el => el.getAttribute('tabindex') === '0');\n        const nextIndex = (currentIndex + direction + controls.length) % controls.length;\n        \n        controls[currentIndex].setAttribute('tabindex', '-1');\n        controls[nextIndex].setAttribute('tabindex', '0');\n        controls[nextIndex].focus();\n    }\n    \n    setupScreenReaderSupport() {\n        // Add descriptions for charts and complex content\n        this.addChartDescriptions();\n        \n        // Add sports terminology explanations\n        this.addSportsGlossary();\n        \n        // Enhanced table headers and captions\n        this.enhanceDataTables();\n        \n        // Form labels and descriptions\n        this.enhanceFormAccessibility();\n    }\n    \n    addChartDescriptions() {\n        document.querySelectorAll('.chart, canvas').forEach((chart, index) => {\n            if (!chart.getAttribute('aria-label')) {\n                const description = this.generateChartDescription(chart);\n                chart.setAttribute('aria-label', description.summary);\n                \n                // Add detailed description\n                const descId = `chart-desc-${index}`;\n                const descEl = document.createElement('div');\n                descEl.id = descId;\n                descEl.className = 'sr-only';\n                descEl.textContent = description.detailed;\n                \n                chart.parentNode.insertBefore(descEl, chart.nextSibling);\n                chart.setAttribute('aria-describedby', descId);\n            }\n        });\n    }\n    \n    generateChartDescription(chart) {\n        // This would analyze the chart data to generate descriptions\n        // For now, providing generic descriptions based on context\n        const context = chart.closest('.widget, .dashboard-card');\n        const title = context?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent || 'Chart';\n        \n        return {\n            summary: `${title} - Interactive data visualization`,\n            detailed: `This chart displays ${title.toLowerCase()} with interactive data points. Use arrow keys to navigate data points, Enter to select, and Tab to move to chart controls.`\n        };\n    }\n    \n    addSportsGlossary() {\n        // Add explanations for sports-specific terms\n        const glossaryTerms = {\n            'WAR': 'Wins Above Replacement - a comprehensive statistic measuring a player\\'s total contribution',\n            'OPS': 'On-base Plus Slugging - combines on-base percentage and slugging percentage',\n            'ERA': 'Earned Run Average - average number of earned runs given up by a pitcher per nine innings',\n            'QBR': 'Quarterback Rating - measure of quarterback performance',\n            'PER': 'Player Efficiency Rating - measure of per-minute basketball performance'\n        };\n        \n        Object.entries(glossaryTerms).forEach(([term, definition]) => {\n            const elements = document.querySelectorAll(`[title*=\"${term}\"], [aria-label*=\"${term}\"]`);\n            elements.forEach(el => {\n                if (!el.getAttribute('aria-describedby')) {\n                    const descId = `glossary-${term.toLowerCase()}`;\n                    let descEl = document.getElementById(descId);\n                    \n                    if (!descEl) {\n                        descEl = document.createElement('div');\n                        descEl.id = descId;\n                        descEl.className = 'sr-only';\n                        descEl.textContent = definition;\n                        document.body.appendChild(descEl);\n                    }\n                    \n                    el.setAttribute('aria-describedby', descId);\n                }\n            });\n        });\n    }\n    \n    enhanceDataTables() {\n        document.querySelectorAll('table').forEach(table => {\n            // Add caption if missing\n            if (!table.querySelector('caption')) {\n                const caption = document.createElement('caption');\n                caption.textContent = this.generateTableCaption(table);\n                table.insertBefore(caption, table.firstChild);\n            }\n            \n            // Add scope attributes to headers\n            table.querySelectorAll('th').forEach(th => {\n                if (!th.hasAttribute('scope')) {\n                    const isColumnHeader = th.closest('thead') || th.cellIndex === 0;\n                    th.setAttribute('scope', isColumnHeader ? 'col' : 'row');\n                }\n            });\n            \n            // Add sorting accessibility\n            table.querySelectorAll('th[data-sortable]').forEach(th => {\n                th.setAttribute('tabindex', '0');\n                th.setAttribute('role', 'columnheader button');\n                th.setAttribute('aria-sort', 'none');\n            });\n        });\n    }\n    \n    generateTableCaption(table) {\n        const context = table.closest('.widget, .dashboard-card');\n        const title = context?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent;\n        const rowCount = table.querySelectorAll('tbody tr').length;\n        const colCount = table.querySelectorAll('thead th, tbody tr:first-child td').length;\n        \n        return `${title || 'Data table'} with ${rowCount} rows and ${colCount} columns`;\n    }\n    \n    enhanceFormAccessibility() {\n        document.querySelectorAll('input, select, textarea').forEach(field => {\n            // Add labels for fields without them\n            if (!field.id || !document.querySelector(`label[for=\"${field.id}\"]`)) {\n                const wrapper = field.closest('.form-group, .input-group');\n                const label = wrapper?.querySelector('label, .label-text');\n                \n                if (label && !field.getAttribute('aria-label')) {\n                    field.setAttribute('aria-label', label.textContent.trim());\n                }\n            }\n            \n            // Add required indicators\n            if (field.hasAttribute('required') && !field.getAttribute('aria-required')) {\n                field.setAttribute('aria-required', 'true');\n            }\n            \n            // Add error descriptions\n            const errorEl = field.parentNode.querySelector('.error, .invalid-feedback');\n            if (errorEl) {\n                const errorId = `error-${field.id || Math.random().toString(36).substr(2, 9)}`;\n                errorEl.id = errorId;\n                field.setAttribute('aria-describedby', errorId);\n                field.setAttribute('aria-invalid', 'true');\n            }\n        });\n    }\n    \n    addAccessibilityControls() {\n        const controls = document.createElement('div');\n        controls.className = 'accessibility-controls';\n        controls.setAttribute('role', 'toolbar');\n        controls.setAttribute('aria-label', 'Accessibility controls');\n        \n        controls.innerHTML = `\n            <h3 class=\"sr-only\">Accessibility Options</h3>\n            <button class=\"a11y-btn\" data-action=\"toggle-high-contrast\" aria-pressed=\"false\">\n                <span aria-hidden=\"true\">🔆</span> High Contrast\n            </button>\n            <button class=\"a11y-btn\" data-action=\"toggle-large-text\" aria-pressed=\"false\">\n                <span aria-hidden=\"true\">🔍</span> Large Text\n            </button>\n            <button class=\"a11y-btn\" data-action=\"toggle-reduced-motion\" aria-pressed=\"${this.preferences.reducedMotion}\">\n                <span aria-hidden=\"true\">⏸️</span> Reduce Motion\n            </button>\n            <button class=\"a11y-btn\" data-action=\"toggle-keyboard-help\" aria-pressed=\"false\">\n                <span aria-hidden=\"true\">⌨️</span> Keyboard Help\n            </button>\n        `;\n        \n        // Style the controls\n        const style = document.createElement('style');\n        style.textContent = `\n            .accessibility-controls {\n                position: fixed;\n                top: 60px;\n                right: 20px;\n                background: rgba(13, 13, 13, 0.95);\n                border: 2px solid #BF5700;\n                border-radius: 8px;\n                padding: 15px;\n                z-index: 9999;\n                display: none;\n                flex-direction: column;\n                gap: 10px;\n                min-width: 200px;\n            }\n            \n            .accessibility-controls.active {\n                display: flex;\n            }\n            \n            .a11y-btn {\n                background: transparent;\n                border: 1px solid #333;\n                color: #fff;\n                padding: 8px 12px;\n                border-radius: 4px;\n                cursor: pointer;\n                text-align: left;\n                transition: all 0.3s;\n            }\n            \n            .a11y-btn:hover {\n                background: #BF5700;\n                border-color: #BF5700;\n            }\n            \n            .a11y-btn[aria-pressed=\"true\"] {\n                background: #BF5700;\n                border-color: #BF5700;\n            }\n            \n            .a11y-toggle {\n                position: fixed;\n                top: 20px;\n                right: 80px;\n                background: #BF5700;\n                color: white;\n                border: none;\n                padding: 10px;\n                border-radius: 50%;\n                cursor: pointer;\n                z-index: 10000;\n                width: 50px;\n                height: 50px;\n                font-size: 20px;\n            }\n            \n            .a11y-toggle:focus {\n                outline: 4px solid #fff;\n                outline-offset: 2px;\n            }\n        `;\n        \n        document.head.appendChild(style);\n        \n        // Add toggle button\n        const toggle = document.createElement('button');\n        toggle.className = 'a11y-toggle';\n        toggle.innerHTML = '♿';\n        toggle.setAttribute('aria-label', 'Accessibility options');\n        toggle.setAttribute('aria-expanded', 'false');\n        \n        toggle.addEventListener('click', () => {\n            const isOpen = controls.classList.toggle('active');\n            toggle.setAttribute('aria-expanded', isOpen.toString());\n        });\n        \n        document.body.appendChild(toggle);\n        document.body.appendChild(controls);\n        \n        this.bindAccessibilityControls(controls);\n    }\n    \n    bindAccessibilityControls(controls) {\n        controls.addEventListener('click', (e) => {\n            const button = e.target.closest('.a11y-btn');\n            if (!button) return;\n            \n            const action = button.getAttribute('data-action');\n            const isPressed = button.getAttribute('aria-pressed') === 'true';\n            \n            button.setAttribute('aria-pressed', (!isPressed).toString());\n            \n            this.handleAccessibilityAction(action, !isPressed);\n        });\n    }\n    \n    handleAccessibilityAction(action, enabled) {\n        switch (action) {\n            case 'toggle-high-contrast':\n                this.preferences.highContrast = enabled;\n                document.body.classList.toggle('high-contrast', enabled);\n                this.announce(enabled ? 'High contrast enabled' : 'High contrast disabled', 'status');\n                break;\n                \n            case 'toggle-large-text':\n                this.preferences.largeText = enabled;\n                document.body.classList.toggle('large-text', enabled);\n                this.announce(enabled ? 'Large text enabled' : 'Large text disabled', 'status');\n                break;\n                \n            case 'toggle-reduced-motion':\n                this.preferences.reducedMotion = enabled;\n                document.body.classList.toggle('reduced-motion', enabled);\n                this.announce(enabled ? 'Reduced motion enabled' : 'Reduced motion disabled', 'status');\n                break;\n                \n            case 'toggle-keyboard-help':\n                if (enabled) {\n                    this.showKeyboardHelp();\n                }\n                break;\n        }\n        \n        this.savePreferences();\n    }\n    \n    showKeyboardHelp() {\n        const helpModal = document.createElement('div');\n        helpModal.className = 'keyboard-help-modal';\n        helpModal.setAttribute('role', 'dialog');\n        helpModal.setAttribute('aria-labelledby', 'keyboard-help-title');\n        helpModal.setAttribute('aria-modal', 'true');\n        \n        helpModal.innerHTML = `\n            <div class=\"modal-content\">\n                <header class=\"modal-header\">\n                    <h2 id=\"keyboard-help-title\">Keyboard Navigation Help</h2>\n                    <button class=\"modal-close\" aria-label=\"Close help dialog\">×</button>\n                </header>\n                <div class=\"modal-body\">\n                    <h3>Global Shortcuts</h3>\n                    <dl class=\"shortcut-list\">\n                        <dt>Alt + D</dt><dd>Go to Dashboard</dd>\n                        <dt>Alt + C</dt><dd>Go to Coach</dd>\n                        <dt>Alt + S</dt><dd>Go to Stats</dd>\n                        <dt>Alt + H</dt><dd>Show this help</dd>\n                    </dl>\n                    \n                    <h3>Navigation</h3>\n                    <dl class=\"shortcut-list\">\n                        <dt>Tab</dt><dd>Move to next interactive element</dd>\n                        <dt>Shift + Tab</dt><dd>Move to previous interactive element</dd>\n                        <dt>Enter/Space</dt><dd>Activate buttons and links</dd>\n                        <dt>Escape</dt><dd>Close dialogs and menus</dd>\n                    </dl>\n                    \n                    <h3>Charts and Data</h3>\n                    <dl class=\"shortcut-list\">\n                        <dt>Arrow Keys</dt><dd>Navigate data points in charts</dd>\n                        <dt>Enter</dt><dd>Select/activate data point</dd>\n                        <dt>Page Up/Down</dt><dd>Navigate by larger increments</dd>\n                    </dl>\n                </div>\n            </div>\n            <div class=\"modal-backdrop\"></div>\n        `;\n        \n        // Style the modal\n        const modalStyle = document.createElement('style');\n        modalStyle.textContent = `\n            .keyboard-help-modal {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                z-index: 10000;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n            \n            .modal-backdrop {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.7);\n                z-index: -1;\n            }\n            \n            .modal-content {\n                background: #1a1a1a;\n                border: 2px solid #BF5700;\n                border-radius: 8px;\n                padding: 24px;\n                max-width: 600px;\n                max-height: 80vh;\n                overflow-y: auto;\n                color: #fff;\n            }\n            \n            .modal-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 20px;\n                border-bottom: 1px solid #333;\n                padding-bottom: 15px;\n            }\n            \n            .modal-close {\n                background: none;\n                border: none;\n                color: #999;\n                font-size: 24px;\n                cursor: pointer;\n                padding: 5px;\n            }\n            \n            .shortcut-list {\n                margin: 15px 0;\n            }\n            \n            .shortcut-list dt {\n                background: #333;\n                color: #BF5700;\n                padding: 4px 8px;\n                border-radius: 4px;\n                font-family: monospace;\n                font-weight: bold;\n                display: inline-block;\n                min-width: 100px;\n                margin: 5px 10px 5px 0;\n            }\n            \n            .shortcut-list dd {\n                display: inline;\n                margin: 0;\n            }\n        `;\n        \n        document.head.appendChild(modalStyle);\n        document.body.appendChild(helpModal);\n        \n        // Focus management\n        const closeBtn = helpModal.querySelector('.modal-close');\n        closeBtn.focus();\n        \n        const closeModal = () => {\n            helpModal.remove();\n            modalStyle.remove();\n            document.querySelector('.a11y-btn[data-action=\"toggle-keyboard-help\"]').focus();\n        };\n        \n        closeBtn.addEventListener('click', closeModal);\n        helpModal.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                closeModal();\n            }\n        });\n    }\n    \n    monitorCompliance() {\n        // Simple compliance monitoring\n        this.runComplianceChecks();\n        \n        // Re-run checks when DOM changes\n        const observer = new MutationObserver(() => {\n            clearTimeout(this.complianceTimeout);\n            this.complianceTimeout = setTimeout(() => {\n                this.runComplianceChecks();\n            }, 1000);\n        });\n        \n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n    \n    runComplianceChecks() {\n        this.violations = [];\n        \n        // Check for images without alt text\n        document.querySelectorAll('img:not([alt])').forEach(img => {\n            this.violations.push({\n                type: 'missing-alt-text',\n                element: img,\n                message: 'Image missing alt text'\n            });\n        });\n        \n        // Check for form inputs without labels\n        document.querySelectorAll('input:not([aria-label]):not([aria-labelledby])').forEach(input => {\n            const hasLabel = document.querySelector(`label[for=\"${input.id}\"]`);\n            if (!hasLabel) {\n                this.violations.push({\n                    type: 'missing-label',\n                    element: input,\n                    message: 'Form input missing label'\n                });\n            }\n        });\n        \n        // Check for low contrast\n        this.checkColorContrast();\n        \n        if (this.violations.length > 0) {\n            console.warn(`⚠️ Found ${this.violations.length} accessibility violations:`, this.violations);\n        }\n    }\n    \n    checkColorContrast() {\n        // This would implement actual contrast ratio calculations\n        // For now, just checking for common problematic combinations\n        const problematicSelectors = [\n            '.text-light-on-light',\n            '.low-contrast-text',\n            '[style*=\"color:#999\"][style*=\"background:#fff\"]'\n        ];\n        \n        problematicSelectors.forEach(selector => {\n            document.querySelectorAll(selector).forEach(el => {\n                this.violations.push({\n                    type: 'low-contrast',\n                    element: el,\n                    message: 'Potentially low color contrast'\n                });\n            });\n        });\n    }\n    \n    bindEvents() {\n        // Apply saved preferences on load\n        if (this.preferences.highContrast) {\n            document.body.classList.add('high-contrast');\n        }\n        \n        if (this.preferences.largeText) {\n            document.body.classList.add('large-text');\n        }\n        \n        if (this.preferences.reducedMotion) {\n            document.body.classList.add('reduced-motion');\n        }\n        \n        // Listen for system preference changes\n        const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n        reducedMotionQuery.addListener((e) => {\n            if (e.matches && !this.preferences.reducedMotion) {\n                this.preferences.reducedMotion = true;\n                document.body.classList.add('reduced-motion');\n                this.savePreferences();\n            }\n        });\n    }\n    \n    announce(message, type = 'status') {\n        const region = document.getElementById(`${type}-announcements`);\n        if (!region) return;\n        \n        // Clear previous announcement\n        region.textContent = '';\n        \n        // Add new announcement after a brief delay to ensure it's read\n        setTimeout(() => {\n            region.textContent = message;\n        }, 100);\n        \n        // Clear after 5 seconds to prevent accumulation\n        setTimeout(() => {\n            if (region.textContent === message) {\n                region.textContent = '';\n            }\n        }, 5000);\n    }\n    \n    navigateToSection(section) {\n        const targets = {\n            dashboard: '#main, .dashboard, [data-page=\"dashboard\"]',\n            coach: '.coach-section, [data-page=\"coach\"]',\n            stats: '.stats-section, [data-page=\"stats\"]',\n            help: '.help-section, [data-page=\"help\"]'\n        };\n        \n        const target = document.querySelector(targets[section]);\n        if (target) {\n            target.scrollIntoView({ behavior: 'smooth' });\n            target.focus();\n        }\n    }\n    \n    savePreferences() {\n        try {\n            localStorage.setItem('blaze_accessibility_prefs', JSON.stringify(this.preferences));\n        } catch (error) {\n            console.warn('Failed to save accessibility preferences:', error);\n        }\n    }\n    \n    // Public API\n    getViolations() {\n        return this.violations;\n    }\n    \n    getComplianceScore() {\n        const totalChecks = 10; // Number of different checks we perform\n        const violationTypes = new Set(this.violations.map(v => v.type)).size;\n        return Math.max(0, ((totalChecks - violationTypes) / totalChecks) * 100);\n    }\n    \n    toggleFeature(feature, enabled) {\n        this.handleAccessibilityAction(`toggle-${feature}`, enabled);\n    }\n    \n    announceToUser(message, priority = 'polite') {\n        const type = priority === 'assertive' ? 'alert' : 'status';\n        this.announce(message, type);\n    }\n}\n\n// Initialize global accessibility system\nwindow.blazeAccessibility = new AccessibilitySystem();\n\n// Export for Node.js environment\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = AccessibilitySystem;\n}\n\nconsole.log('♿ Accessibility system active - WCAG 2.2 AA compliant');