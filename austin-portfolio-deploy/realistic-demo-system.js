/**
 * Realistic Demo Mode - Synthetic Athletes with Video Overlays
 * Uses publicly available sports footage with synthetic overlays
 */

class RealisticDemoSystem {
    constructor() {
        this.demoVideos = {
            'baseball-pitcher': {
                name: 'Elite College Pitcher Analysis',
                athlete: 'Demo Athlete (Texas State)',
                videoSrc: '/demo/videos/generic-pitcher.mp4', // Publicly available footage
                duration: 45000,
                overlayData: this.generatePitcherOverlays()
            },
            'football-qb': {
                name: 'Quarterback Mechanics Breakdown', 
                athlete: 'Demo Athlete (UT System)',
                videoSrc: '/demo/videos/generic-qb.mp4',
                duration: 35000,
                overlayData: this.generateQBOverlays()
            },
            'basketball-shooter': {
                name: 'Shot Form Analysis',
                athlete: 'Demo Athlete (Memphis)',
                videoSrc: '/demo/videos/generic-shooter.mp4', 
                duration: 30000,
                overlayData: this.generateShooterOverlays()
            }
        };
        
        this.currentDemo = null;
        this.videoElement = null;
        this.canvasElement = null;
        this.overlayCanvas = null;
        this.analysisInterval = null;
        
        this.init();
    }
    
    init() {
        this.setupVideoPlayer();
        this.setupAnalysisOverlay();
        this.bindControls();
        
        console.log('🎬 Realistic demo system initialized');
    }
    
    generatePitcherOverlays() {\n        return {\n            poses: [\n                // Simulated pose keypoints for pitching motion\n                { frame: 0, phase: 'windup', keypoints: this.generatePoseKeypoints('windup') },\n                { frame: 15, phase: 'leg_lift', keypoints: this.generatePoseKeypoints('leg_lift') },\n                { frame: 30, phase: 'stride', keypoints: this.generatePoseKeypoints('stride') },\n                { frame: 45, phase: 'arm_cocking', keypoints: this.generatePoseKeypoints('arm_cocking') },\n                { frame: 50, phase: 'acceleration', keypoints: this.generatePoseKeypoints('acceleration') },\n                { frame: 55, phase: 'release', keypoints: this.generatePoseKeypoints('release') },\n                { frame: 75, phase: 'follow_through', keypoints: this.generatePoseKeypoints('follow_through') }\n            ],\n            insights: [\n                {\n                    timestamp: 2000,\n                    confidence: 0.94,\n                    insight: \"Stride length optimal at 85% of height\",\n                    rationale: \"Measured stride foot placement relative to pitcher's height of 6'2\\\". Optimal range is 80-90%.\",\n                    evidence: \"Frame analysis shows 62.5\\\" stride vs 74\\\" height\"\n                },\n                {\n                    timestamp: 5000,\n                    confidence: 0.87,\n                    insight: \"Hip-shoulder separation could improve velocity\",\n                    rationale: \"Current separation of 35° vs elite average of 42°. Increased separation generates more torque.\",\n                    evidence: \"Biomechanical analysis of trunk rotation sequence\"\n                },\n                {\n                    timestamp: 8000,\n                    confidence: 0.92,\n                    insight: \"Release point highly consistent\",\n                    rationale: \"Release variation of only 2.1 inches across 10 pitches. Elite consistency.\",\n                    evidence: \"Computer vision tracking of ball release coordinates\"\n                }\n            ],\n            biometrics: {\n                arm_speed: { value: 2400, unit: 'deg/sec', confidence: 0.91 },\n                hip_rotation: { value: 720, unit: 'deg/sec', confidence: 0.89 },\n                stride_efficiency: { value: 0.85, unit: 'ratio', confidence: 0.93 },\n                balance_score: { value: 0.88, unit: 'stability', confidence: 0.86 }\n            },\n            microExpressions: {\n                confidence_level: 0.89,\n                focus_intensity: 0.92,\n                stress_indicators: 0.23,\n                competitive_drive: 0.91\n            }\n        };\n    }\n    \n    generateQBOverlays() {\n        return {\n            poses: [\n                { frame: 0, phase: 'setup', keypoints: this.generatePoseKeypoints('qb_setup') },\n                { frame: 20, phase: 'drop_back', keypoints: this.generatePoseKeypoints('qb_dropback') },\n                { frame: 35, phase: 'pocket', keypoints: this.generatePoseKeypoints('qb_pocket') },\n                { frame: 45, phase: 'throw_prep', keypoints: this.generatePoseKeypoints('qb_prep') },\n                { frame: 50, phase: 'release', keypoints: this.generatePoseKeypoints('qb_release') },\n                { frame: 65, phase: 'follow_through', keypoints: this.generatePoseKeypoints('qb_follow') }\n            ],\n            insights: [\n                {\n                    timestamp: 3000,\n                    confidence: 0.88,\n                    insight: \"Footwork mechanics solid under pressure\",\n                    rationale: \"Maintained proper step timing despite simulated rush. 7-step drop executed in 2.1 seconds.\",\n                    evidence: \"Motion analysis of foot placement sequence\"\n                },\n                {\n                    timestamp: 6000,\n                    confidence: 0.76,\n                    insight: \"Deep ball accuracy opportunity identified\",\n                    rationale: \"Release angle 2.3° lower than optimal for 20+ yard passes. Slight adjustment could improve accuracy.\",\n                    evidence: \"Trajectory analysis vs. optimal launch angles\"\n                }\n            ],\n            biometrics: {\n                arm_velocity: { value: 58.2, unit: 'mph', confidence: 0.89 },\n                release_consistency: { value: 0.91, unit: 'repeatability', confidence: 0.87 },\n                pocket_presence: { value: 0.83, unit: 'composure', confidence: 0.85 },\n                decision_time: { value: 2.8, unit: 'seconds', confidence: 0.92 }\n            },\n            microExpressions: {\n                leadership_presence: 0.93,\n                pressure_response: 0.86,\n                field_awareness: 0.89,\n                vocal_confidence: 0.88\n            }\n        };\n    }\n    \n    generateShooterOverlays() {\n        return {\n            poses: [\n                { frame: 0, phase: 'stance', keypoints: this.generatePoseKeypoints('shoot_stance') },\n                { frame: 15, phase: 'gather', keypoints: this.generatePoseKeypoints('shoot_gather') },\n                { frame: 25, phase: 'set_point', keypoints: this.generatePoseKeypoints('shoot_setpoint') },\n                { frame: 30, phase: 'release', keypoints: this.generatePoseKeypoints('shoot_release') },\n                { frame: 45, phase: 'follow_through', keypoints: this.generatePoseKeypoints('shoot_follow') }\n            ],\n            insights: [\n                {\n                    timestamp: 2500,\n                    confidence: 0.92,\n                    insight: \"Shot arc consistently optimal\",\n                    rationale: \"Average arc of 47.8° falls within optimal 45-50° range for three-point shooting.\",\n                    evidence: \"Computer vision analysis of ball trajectory\"\n                },\n                {\n                    timestamp: 4500,\n                    confidence: 0.85,\n                    insight: \"Release timing very consistent\",\n                    rationale: \"Release point variation of only 0.08 seconds across multiple attempts. Elite repeatability.\",\n                    evidence: \"Motion capture analysis of shooting rhythm\"\n                }\n            ],\n            biometrics: {\n                shot_arc: { value: 47.8, unit: 'degrees', confidence: 0.92 },\n                release_speed: { value: 0.88, unit: 'consistency', confidence: 0.89 },\n                balance_score: { value: 0.86, unit: 'stability', confidence: 0.90 },\n                follow_through: { value: 0.94, unit: 'technique', confidence: 0.93 }\n            },\n            microExpressions: {\n                shot_confidence: 0.91,\n                focus_consistency: 0.88,\n                clutch_mentality: 0.89,\n                court_awareness: 0.85\n            }\n        };\n    }\n    \n    generatePoseKeypoints(phase) {\n        // Generate realistic pose keypoints for different phases\n        // Using COCO 17-point model format\n        const baseKeypoints = {\n            nose: { x: 0.5, y: 0.3, confidence: 0.9 },\n            left_eye: { x: 0.48, y: 0.28, confidence: 0.9 },\n            right_eye: { x: 0.52, y: 0.28, confidence: 0.9 },\n            left_ear: { x: 0.46, y: 0.30, confidence: 0.8 },\n            right_ear: { x: 0.54, y: 0.30, confidence: 0.8 },\n            left_shoulder: { x: 0.4, y: 0.45, confidence: 0.95 },\n            right_shoulder: { x: 0.6, y: 0.45, confidence: 0.95 },\n            left_elbow: { x: 0.35, y: 0.60, confidence: 0.9 },\n            right_elbow: { x: 0.65, y: 0.60, confidence: 0.9 },\n            left_wrist: { x: 0.30, y: 0.75, confidence: 0.85 },\n            right_wrist: { x: 0.70, y: 0.75, confidence: 0.85 },\n            left_hip: { x: 0.42, y: 0.70, confidence: 0.9 },\n            right_hip: { x: 0.58, y: 0.70, confidence: 0.9 },\n            left_knee: { x: 0.41, y: 0.85, confidence: 0.85 },\n            right_knee: { x: 0.59, y: 0.85, confidence: 0.85 },\n            left_ankle: { x: 0.40, y: 0.95, confidence: 0.8 },\n            right_ankle: { x: 0.60, y: 0.95, confidence: 0.8 }\n        };\n        \n        // Modify keypoints based on phase\n        const keypoints = JSON.parse(JSON.stringify(baseKeypoints));\n        \n        switch (phase) {\n            case 'windup':\n                keypoints.left_knee.y = 0.75; // Leg lift\n                keypoints.right_elbow.y = 0.40; // Arm up\n                break;\n            case 'release':\n                keypoints.right_wrist.x = 0.55; // Follow through\n                keypoints.right_wrist.y = 0.40;\n                break;\n            // Add more phase-specific modifications\n        }\n        \n        return keypoints;\n    }\n    \n    setupVideoPlayer() {\n        // Create video container\n        const container = document.createElement('div');\n        container.className = 'demo-video-container';\n        container.innerHTML = `\n            <div class=\"video-wrapper\">\n                <video id=\"demo-video\" muted playsinline>\n                    <source src=\"\" type=\"video/mp4\">\n                    Your browser does not support video playback.\n                </video>\n                <canvas id=\"demo-overlay\" class=\"video-overlay\"></canvas>\n            </div>\n            \n            <div class=\"demo-controls\">\n                <button class=\"demo-btn\" id=\"play-pause-btn\" aria-label=\"Play/Pause demo\">\n                    <span class=\"btn-icon\">▶️</span> Play Analysis\n                </button>\n                <button class=\"demo-btn\" id=\"reset-btn\" aria-label=\"Reset demo\">\n                    <span class=\"btn-icon\">🔄</span> Reset\n                </button>\n                <button class=\"demo-btn\" id=\"fullscreen-btn\" aria-label=\"Toggle fullscreen\">\n                    <span class=\"btn-icon\">⛶</span> Fullscreen\n                </button>\n            </div>\n            \n            <div class=\"demo-insights\" id=\"demo-insights\">\n                <!-- Dynamic insights will appear here -->\n            </div>\n        `;\n        \n        // Add to page\n        const targetContainer = document.querySelector('.demo-launcher') || document.body;\n        targetContainer.appendChild(container);\n        \n        this.videoElement = container.querySelector('#demo-video');\n        this.overlayCanvas = container.querySelector('#demo-overlay');\n        \n        this.addVideoStyles();\n    }\n    \n    addVideoStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .demo-video-container {\n                background: rgba(13, 13, 13, 0.95);\n                border: 2px solid #BF5700;\n                border-radius: 12px;\n                padding: 20px;\n                margin: 20px 0;\n                display: none;\n            }\n            \n            .demo-video-container.active {\n                display: block;\n            }\n            \n            .video-wrapper {\n                position: relative;\n                width: 100%;\n                max-width: 800px;\n                margin: 0 auto;\n                background: #000;\n                border-radius: 8px;\n                overflow: hidden;\n            }\n            \n            #demo-video {\n                width: 100%;\n                height: auto;\n                display: block;\n            }\n            \n            .video-overlay {\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                pointer-events: none;\n                z-index: 10;\n            }\n            \n            .demo-controls {\n                display: flex;\n                justify-content: center;\n                gap: 15px;\n                margin: 20px 0;\n                flex-wrap: wrap;\n            }\n            \n            .demo-btn {\n                background: linear-gradient(135deg, #BF5700, #FF8C00);\n                color: white;\n                border: none;\n                padding: 12px 20px;\n                border-radius: 6px;\n                font-weight: 600;\n                cursor: pointer;\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                transition: all 0.3s ease;\n                min-width: 140px;\n                justify-content: center;\n            }\n            \n            .demo-btn:hover {\n                transform: translateY(-2px);\n                box-shadow: 0 4px 12px rgba(191, 87, 0, 0.4);\n            }\n            \n            .demo-btn:disabled {\n                opacity: 0.6;\n                cursor: not-allowed;\n            }\n            \n            .demo-insights {\n                margin-top: 20px;\n            }\n            \n            .insight-item {\n                background: rgba(26, 26, 26, 0.9);\n                border: 1px solid #333;\n                border-left: 4px solid #BF5700;\n                border-radius: 6px;\n                padding: 16px;\n                margin: 12px 0;\n                animation: slideInUp 0.5s ease;\n            }\n            \n            .insight-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 8px;\n            }\n            \n            .insight-text {\n                color: #fff;\n                font-weight: 600;\n                margin: 0;\n            }\n            \n            .confidence-badge {\n                background: rgba(76, 175, 80, 0.2);\n                color: #4CAF50;\n                padding: 4px 8px;\n                border-radius: 10px;\n                font-size: 0.8rem;\n                font-weight: 600;\n                display: flex;\n                align-items: center;\n                gap: 4px;\n            }\n            \n            .insight-rationale {\n                color: #999;\n                font-size: 0.9rem;\n                line-height: 1.4;\n                margin: 8px 0 0 0;\n                padding-top: 8px;\n                border-top: 1px solid #333;\n            }\n            \n            .evidence-tag {\n                display: inline-block;\n                background: rgba(255, 140, 0, 0.2);\n                color: #FF8C00;\n                padding: 2px 6px;\n                border-radius: 8px;\n                font-size: 0.75rem;\n                margin-top: 4px;\n            }\n            \n            @keyframes slideInUp {\n                from {\n                    transform: translateY(20px);\n                    opacity: 0;\n                }\n                to {\n                    transform: translateY(0);\n                    opacity: 1;\n                }\n            }\n            \n            .pose-overlay {\n                stroke: #BF5700;\n                stroke-width: 2;\n                fill: rgba(191, 87, 0, 0.3);\n            }\n            \n            .keypoint {\n                fill: #FF8C00;\n                stroke: #BF5700;\n                stroke-width: 1;\n            }\n            \n            .skeleton-line {\n                stroke: #BF5700;\n                stroke-width: 2;\n                opacity: 0.8;\n            }\n            \n            @media (max-width: 768px) {\n                .demo-controls {\n                    flex-direction: column;\n                    align-items: center;\n                }\n                \n                .demo-btn {\n                    width: 100%;\n                    max-width: 250px;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    setupAnalysisOverlay() {\n        // This will draw pose overlays and analysis graphics\n        if (!this.overlayCanvas) return;\n        \n        const ctx = this.overlayCanvas.getContext('2d');\n        \n        // Resize canvas to match video\n        const resizeCanvas = () => {\n            if (this.videoElement) {\n                this.overlayCanvas.width = this.videoElement.videoWidth || this.videoElement.offsetWidth;\n                this.overlayCanvas.height = this.videoElement.videoHeight || this.videoElement.offsetHeight;\n            }\n        };\n        \n        if (this.videoElement) {\n            this.videoElement.addEventListener('loadedmetadata', resizeCanvas);\n            this.videoElement.addEventListener('resize', resizeCanvas);\n        }\n        \n        window.addEventListener('resize', resizeCanvas);\n    }\n    \n    bindControls() {\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('#play-pause-btn') || e.target.closest('#play-pause-btn')) {\n                this.togglePlayPause();\n            }\n            \n            if (e.target.matches('#reset-btn') || e.target.closest('#reset-btn')) {\n                this.resetDemo();\n            }\n            \n            if (e.target.matches('#fullscreen-btn') || e.target.closest('#fullscreen-btn')) {\n                this.toggleFullscreen();\n            }\n            \n            // Demo scenario selection\n            if (e.target.matches('.start-demo-btn')) {\n                const scenario = e.target.closest('.demo-scenario').getAttribute('data-scenario');\n                this.startRealisticDemo(scenario);\n            }\n        });\n    }\n    \n    async startRealisticDemo(scenarioKey) {\n        const scenario = this.demoVideos[scenarioKey];\n        if (!scenario) {\n            console.error('Demo scenario not found:', scenarioKey);\n            return;\n        }\n        \n        this.currentDemo = {\n            scenario: scenarioKey,\n            data: scenario,\n            startTime: Date.now(),\n            playing: false\n        };\n        \n        // Show video container\n        const container = document.querySelector('.demo-video-container');\n        if (container) {\n            container.classList.add('active');\n            container.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n        \n        // Load video\n        if (this.videoElement) {\n            this.videoElement.src = scenario.videoSrc;\n            await new Promise((resolve) => {\n                this.videoElement.addEventListener('loadeddata', resolve, { once: true });\n            });\n        }\n        \n        // Clear previous insights\n        this.clearInsights();\n        \n        console.log(`🎬 Starting realistic demo: ${scenario.name}`);\n        \n        // Announce to accessibility system\n        if (window.blazeAccessibility) {\n            window.blazeAccessibility.announceToUser(`Starting ${scenario.name} demo`, 'assertive');\n        }\n    }\n    \n    togglePlayPause() {\n        if (!this.videoElement || !this.currentDemo) return;\n        \n        const btn = document.getElementById('play-pause-btn');\n        const icon = btn?.querySelector('.btn-icon');\n        \n        if (this.videoElement.paused) {\n            this.videoElement.play();\n            this.currentDemo.playing = true;\n            if (icon) icon.textContent = '⏸️';\n            if (btn) btn.innerHTML = '<span class=\"btn-icon\">⏸️</span> Pause Analysis';\n            \n            // Start analysis overlays\n            this.startAnalysisOverlay();\n            \n            // Schedule insights\n            this.scheduleInsights();\n            \n        } else {\n            this.videoElement.pause();\n            this.currentDemo.playing = false;\n            if (icon) icon.textContent = '▶️';\n            if (btn) btn.innerHTML = '<span class=\"btn-icon\">▶️</span> Resume Analysis';\n            \n            // Stop analysis\n            if (this.analysisInterval) {\n                clearInterval(this.analysisInterval);\n                this.analysisInterval = null;\n            }\n        }\n    }\n    \n    resetDemo() {\n        if (!this.videoElement) return;\n        \n        this.videoElement.currentTime = 0;\n        this.videoElement.pause();\n        \n        if (this.currentDemo) {\n            this.currentDemo.playing = false;\n        }\n        \n        // Reset button states\n        const btn = document.getElementById('play-pause-btn');\n        if (btn) {\n            btn.innerHTML = '<span class=\"btn-icon\">▶️</span> Play Analysis';\n        }\n        \n        // Clear overlays and insights\n        this.clearOverlays();\n        this.clearInsights();\n        \n        if (this.analysisInterval) {\n            clearInterval(this.analysisInterval);\n            this.analysisInterval = null;\n        }\n        \n        console.log('🔄 Demo reset');\n    }\n    \n    toggleFullscreen() {\n        const container = document.querySelector('.demo-video-container');\n        if (!container) return;\n        \n        if (!document.fullscreenElement) {\n            container.requestFullscreen().catch(console.error);\n        } else {\n            document.exitFullscreen().catch(console.error);\n        }\n    }\n    \n    startAnalysisOverlay() {\n        if (!this.overlayCanvas || !this.currentDemo) return;\n        \n        const ctx = this.overlayCanvas.getContext('2d');\n        const overlayData = this.currentDemo.data.overlayData;\n        \n        this.analysisInterval = setInterval(() => {\n            if (!this.videoElement || this.videoElement.paused) return;\n            \n            const currentFrame = Math.floor(this.videoElement.currentTime * 30); // Assuming 30fps\n            \n            // Clear previous overlays\n            ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);\n            \n            // Find current pose data\n            const currentPose = overlayData.poses.find(pose => \n                Math.abs(pose.frame - currentFrame) < 3\n            );\n            \n            if (currentPose) {\n                this.drawPoseOverlay(ctx, currentPose);\n                this.drawBiometricOverlay(ctx, overlayData.biometrics);\n            }\n        }, 100); // Update overlays every 100ms\n    }\n    \n    drawPoseOverlay(ctx, poseData) {\n        if (!poseData.keypoints) return;\n        \n        const width = this.overlayCanvas.width;\n        const height = this.overlayCanvas.height;\n        \n        // Draw keypoints\n        Object.entries(poseData.keypoints).forEach(([name, point]) => {\n            if (point.confidence > 0.5) {\n                const x = point.x * width;\n                const y = point.y * height;\n                \n                // Draw keypoint\n                ctx.beginPath();\n                ctx.arc(x, y, 4, 0, 2 * Math.PI);\n                ctx.fillStyle = '#FF8C00';\n                ctx.fill();\n                ctx.strokeStyle = '#BF5700';\n                ctx.lineWidth = 2;\n                ctx.stroke();\n            }\n        });\n        \n        // Draw skeleton connections\n        this.drawSkeleton(ctx, poseData.keypoints, width, height);\n        \n        // Draw phase label\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        ctx.fillRect(10, 10, 200, 40);\n        ctx.fillStyle = '#FF8C00';\n        ctx.font = '16px Arial';\n        ctx.fillText(`Phase: ${poseData.phase}`, 20, 35);\n    }\n    \n    drawSkeleton(ctx, keypoints, width, height) {\n        const connections = [\n            ['left_shoulder', 'right_shoulder'],\n            ['left_shoulder', 'left_elbow'],\n            ['left_elbow', 'left_wrist'],\n            ['right_shoulder', 'right_elbow'],\n            ['right_elbow', 'right_wrist'],\n            ['left_shoulder', 'left_hip'],\n            ['right_shoulder', 'right_hip'],\n            ['left_hip', 'right_hip'],\n            ['left_hip', 'left_knee'],\n            ['left_knee', 'left_ankle'],\n            ['right_hip', 'right_knee'],\n            ['right_knee', 'right_ankle']\n        ];\n        \n        ctx.strokeStyle = '#BF5700';\n        ctx.lineWidth = 2;\n        ctx.globalAlpha = 0.8;\n        \n        connections.forEach(([point1, point2]) => {\n            const p1 = keypoints[point1];\n            const p2 = keypoints[point2];\n            \n            if (p1 && p2 && p1.confidence > 0.5 && p2.confidence > 0.5) {\n                ctx.beginPath();\n                ctx.moveTo(p1.x * width, p1.y * height);\n                ctx.lineTo(p2.x * width, p2.y * height);\n                ctx.stroke();\n            }\n        });\n        \n        ctx.globalAlpha = 1.0;\n    }\n    \n    drawBiometricOverlay(ctx, biometrics) {\n        const width = this.overlayCanvas.width;\n        const height = this.overlayCanvas.height;\n        \n        // Draw biometric data panel\n        const panelX = width - 250;\n        const panelY = 20;\n        const panelWidth = 230;\n        const panelHeight = 150;\n        \n        // Background\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Border\n        ctx.strokeStyle = '#BF5700';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(panelX, panelY, panelWidth, panelHeight);\n        \n        // Title\n        ctx.fillStyle = '#FF8C00';\n        ctx.font = '14px Arial';\n        ctx.fillText('Live Biometrics', panelX + 10, panelY + 25);\n        \n        // Metrics\n        let yOffset = 45;\n        Object.entries(biometrics).forEach(([metric, data]) => {\n            ctx.fillStyle = '#fff';\n            ctx.font = '12px Arial';\n            ctx.fillText(`${metric.replace('_', ' ')}:`, panelX + 10, panelY + yOffset);\n            \n            ctx.fillStyle = '#4CAF50';\n            ctx.fillText(`${data.value} ${data.unit}`, panelX + 120, panelY + yOffset);\n            \n            // Confidence bar\n            const barWidth = 80;\n            const barHeight = 4;\n            const barX = panelX + 140;\n            const barY = panelY + yOffset + 5;\n            \n            ctx.fillStyle = '#333';\n            ctx.fillRect(barX, barY, barWidth, barHeight);\n            \n            ctx.fillStyle = '#4CAF50';\n            ctx.fillRect(barX, barY, barWidth * data.confidence, barHeight);\n            \n            yOffset += 25;\n        });\n    }\n    \n    scheduleInsights() {\n        if (!this.currentDemo) return;\n        \n        const insights = this.currentDemo.data.overlayData.insights;\n        \n        insights.forEach(insight => {\n            setTimeout(() => {\n                this.showInsight(insight);\n            }, insight.timestamp);\n        });\n    }\n    \n    showInsight(insight) {\n        const container = document.getElementById('demo-insights');\n        if (!container) return;\n        \n        const insightElement = document.createElement('div');\n        insightElement.className = 'insight-item';\n        insightElement.innerHTML = `\n            <div class=\"insight-header\">\n                <p class=\"insight-text\">${insight.insight}</p>\n                <div class=\"confidence-badge\">\n                    <span>✓</span> ${Math.round(insight.confidence * 100)}%\n                </div>\n            </div>\n            <div class=\"insight-rationale\">\n                <strong>Analysis:</strong> ${insight.rationale}\n            </div>\n            <div class=\"evidence-tag\">${insight.evidence}</div>\n        `;\n        \n        container.appendChild(insightElement);\n        \n        // Announce to screen readers\n        if (window.blazeAccessibility) {\n            window.blazeAccessibility.announceToUser(\n                `New insight: ${insight.insight} with ${Math.round(insight.confidence * 100)} percent confidence`,\n                'polite'\n            );\n        }\n        \n        // Auto-scroll to new insight\n        insightElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n    \n    clearInsights() {\n        const container = document.getElementById('demo-insights');\n        if (container) {\n            container.innerHTML = '';\n        }\n    }\n    \n    clearOverlays() {\n        if (this.overlayCanvas) {\n            const ctx = this.overlayCanvas.getContext('2d');\n            ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);\n        }\n    }\n    \n    // Public API\n    getDemoStatus() {\n        return {\n            active: !!this.currentDemo,\n            scenario: this.currentDemo?.scenario,\n            playing: this.currentDemo?.playing || false,\n            currentTime: this.videoElement?.currentTime || 0,\n            duration: this.videoElement?.duration || 0\n        };\n    }\n    \n    getAvailableScenarios() {\n        return Object.keys(this.demoVideos).map(key => ({\n            key,\n            ...this.demoVideos[key]\n        }));\n    }\n}\n\n// Initialize realistic demo system\nif (typeof window !== 'undefined') {\n    window.blazeRealisticDemo = new RealisticDemoSystem();\n}\n\n// Export for Node.js\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = RealisticDemoSystem;\n}\n\nconsole.log('🎬 Realistic demo system with video overlays ready');