/**
 * Consent Infrastructure - Immutable Consent Management
 * Legal lifeline for all data processing operations
 */

class ConsentInfrastructure {
    constructor() {\n        this.consentStore = new Map();\n        this.consentLog = [];\n        this.sessionConsent = new Map();\n        this.retentionPolicies = {\n            video_data: 30,        // 30 days default\n            biometric_data: 90,    // 90 days for biomechanics\n            audio_data: 7,         // 7 days for voice analysis\n            performance_data: 365, // 1 year for stats\n            personal_data: 1095    // 3 years for athlete profiles\n        };\n        \n        this.consentTypes = {\n            video_recording: {\n                name: 'Video Recording & Analysis',\n                description: 'Record and analyze your movements, form, and technique',\n                required: false,\n                sensitive: true,\n                retention_days: 30\n            },\n            audio_recording: {\n                name: 'Audio Recording & Voice Analysis', \n                description: 'Record voice for communication analysis and coaching feedback',\n                required: false,\n                sensitive: true,\n                retention_days: 7\n            },\n            biometric_analysis: {\n                name: 'Biometric Data Processing',\n                description: 'Analyze body measurements, pose, and movement patterns',\n                required: false,\n                sensitive: true,\n                retention_days: 90\n            },\n            performance_tracking: {\n                name: 'Performance Data Collection',\n                description: 'Track statistics, scores, and athletic performance metrics',\n                required: true,\n                sensitive: false,\n                retention_days: 365\n            },\n            ai_processing: {\n                name: 'AI Analysis & Insights',\n                description: 'Use artificial intelligence to generate coaching insights',\n                required: false,\n                sensitive: false,\n                retention_days: 90\n            }\n        };\n        \n        this.emergencyStop = false;\n        this.killSwitchCallbacks = [];\n        \n        this.init();\n    }\n    \n    init() {\n        this.loadConsentHistory();\n        this.setupKillSwitch();\n        this.scheduleRetentionCleanup();\n        this.bindEvents();\n        \n        console.log('‚öñÔ∏è Consent infrastructure initialized - legal compliance active');\n    }\n    \n    async captureConsent(sessionId, athleteId, dataTypes, options = {}) {\n        if (this.emergencyStop) {\n            throw new Error('Data processing stopped - consent system in emergency mode');\n        }\n        \n        // Generate unique consent ID\n        const consentId = this.generateConsentId();\n        const timestamp = Date.now();\n        \n        // Get IP hash and user agent for legal documentation\n        const ipHash = await this.getIPHash();\n        const userAgent = navigator.userAgent;\n        \n        // Create immutable consent record\n        const consentRecord = {\n            consentId,\n            sessionId,\n            athleteId,\n            timestamp,\n            ipHash,\n            userAgent: this.sanitizeUserAgent(userAgent),\n            dataTypes: Array.isArray(dataTypes) ? dataTypes : [dataTypes],\n            granted: {},\n            retention_preferences: options.retention || {},\n            geolocation: options.country || 'US',\n            legal_basis: options.legal_basis || 'consent',\n            purpose_limitation: options.purposes || ['coaching', 'performance_analysis'],\n            withdrawal_method: 'email_or_interface',\n            version: '2.0',\n            // Legal documentation\n            consent_language: options.language || 'en-US',\n            privacy_policy_version: '2024-09-09',\n            terms_accepted: timestamp,\n            // Immutable signature\n            signature: await this.signConsentRecord({\n                consentId,\n                sessionId,\n                athleteId,\n                timestamp,\n                dataTypes\n            })\n        };\n        \n        // Process each consent type\n        for (const dataType of consentRecord.dataTypes) {\n            if (!this.consentTypes[dataType]) {\n                throw new Error(`Unknown data type: ${dataType}`);\n            }\n            \n            const typeConfig = this.consentTypes[dataType];\n            let granted = false;\n            \n            if (typeConfig.required) {\n                // Required data types are auto-granted\n                granted = true;\n            } else {\n                // Get explicit consent for optional types\n                granted = await this.requestExplicitConsent(dataType, typeConfig);\n            }\n            \n            consentRecord.granted[dataType] = {\n                granted,\n                timestamp,\n                retention_days: options.retention?.[dataType] || typeConfig.retention_days,\n                expires_at: timestamp + (options.retention?.[dataType] || typeConfig.retention_days) * 24 * 60 * 60 * 1000\n            };\n        }\n        \n        // Store immutably\n        this.consentStore.set(consentId, Object.freeze(consentRecord));\n        this.sessionConsent.set(sessionId, consentId);\n        \n        // Log the consent action (audit trail)\n        this.logConsentAction({\n            action: 'consent_captured',\n            consentId,\n            sessionId,\n            athleteId,\n            dataTypes: consentRecord.dataTypes,\n            granted: Object.fromEntries(\n                Object.entries(consentRecord.granted).map(([k, v]) => [k, v.granted])\n            ),\n            timestamp,\n            ipHash\n        });\n        \n        // Send to backend for permanent storage\n        this.persistConsentRecord(consentRecord);\n        \n        console.log(`‚öñÔ∏è Consent captured: ${consentId} for session ${sessionId}`);\n        \n        return {\n            consentId,\n            granted: consentRecord.granted,\n            expires_at: Math.min(...Object.values(consentRecord.granted).map(g => g.expires_at))\n        };\n    }\n    \n    async requestExplicitConsent(dataType, typeConfig) {\n        return new Promise((resolve) => {\n            // Create consent modal\n            const modal = document.createElement('div');\n            modal.className = 'consent-modal';\n            modal.innerHTML = `\n                <div class=\"consent-backdrop\"></div>\n                <div class=\"consent-content\" role=\"dialog\" aria-labelledby=\"consent-title\" aria-modal=\"true\">\n                    <header class=\"consent-header\">\n                        <h2 id=\"consent-title\">üîí Data Processing Consent Required</h2>\n                        <p class=\"consent-subtitle\">We need your explicit permission for the following:</p>\n                    </header>\n                    \n                    <div class=\"consent-details\">\n                        <div class=\"consent-type\">\n                            <h3>${typeConfig.name}</h3>\n                            <p>${typeConfig.description}</p>\n                            ${typeConfig.sensitive ? '<span class=\"sensitive-badge\">‚ö†Ô∏è Sensitive Data</span>' : ''}\n                        </div>\n                        \n                        <div class=\"retention-info\">\n                            <h4>Data Retention</h4>\n                            <p>This data will be automatically deleted after <strong>${typeConfig.retention_days} days</strong> unless you specify otherwise.</p>\n                            \n                            <label class=\"retention-option\">\n                                <input type=\"radio\" name=\"retention\" value=\"minimal\" checked>\n                                <span>Minimal (${Math.min(typeConfig.retention_days, 7)} days)</span>\n                            </label>\n                            <label class=\"retention-option\">\n                                <input type=\"radio\" name=\"retention\" value=\"standard\">\n                                <span>Standard (${typeConfig.retention_days} days)</span>\n                            </label>\n                            <label class=\"retention-option\">\n                                <input type=\"radio\" name=\"retention\" value=\"extended\">\n                                <span>Extended (${typeConfig.retention_days * 2} days)</span>\n                            </label>\n                        </div>\n                        \n                        <div class=\"legal-info\">\n                            <h4>Your Rights</h4>\n                            <ul>\n                                <li>‚úÖ You can withdraw consent at any time</li>\n                                <li>‚úÖ You can request data deletion</li>\n                                <li>‚úÖ You can export your data</li>\n                                <li>‚úÖ You will be notified of any data breaches</li>\n                            </ul>\n                        </div>\n                    </div>\n                    \n                    <div class=\"consent-actions\">\n                        <button class=\"consent-deny\" aria-label=\"Deny consent for ${typeConfig.name}\">\n                            ‚ùå Do Not Allow\n                        </button>\n                        <button class=\"consent-grant\" aria-label=\"Grant consent for ${typeConfig.name}\">\n                            ‚úÖ I Consent\n                        </button>\n                    </div>\n                    \n                    <div class=\"legal-footer\">\n                        <p>By consenting, you acknowledge reading our <a href=\"/privacy-policy\" target=\"_blank\">Privacy Policy</a> and <a href=\"/terms\" target=\"_blank\">Terms of Service</a>.</p>\n                        <p class=\"timestamp\">Consent requested at: ${new Date().toLocaleString()}</p>\n                    </div>\n                </div>\n            `;\n            \n            // Add styles\n            this.addConsentModalStyles();\n            \n            document.body.appendChild(modal);\n            \n            // Focus management\n            const firstButton = modal.querySelector('.consent-deny');\n            firstButton?.focus();\n            \n            // Handle responses\n            const handleResponse = (granted) => {\n                // Log the decision\n                this.logConsentAction({\n                    action: 'explicit_consent_response',\n                    dataType,\n                    granted,\n                    timestamp: Date.now(),\n                    user_decision_time: Date.now() - startTime\n                });\n                \n                modal.remove();\n                resolve(granted);\n            };\n            \n            const startTime = Date.now();\n            \n            modal.querySelector('.consent-grant').addEventListener('click', () => {\n                handleResponse(true);\n            });\n            \n            modal.querySelector('.consent-deny').addEventListener('click', () => {\n                handleResponse(false);\n            });\n            \n            // ESC key to deny\n            const handleKeydown = (e) => {\n                if (e.key === 'Escape') {\n                    document.removeEventListener('keydown', handleKeydown);\n                    handleResponse(false);\n                }\n            };\n            \n            document.addEventListener('keydown', handleKeydown);\n        });\n    }\n    \n    addConsentModalStyles() {\n        if (document.querySelector('#consent-modal-styles')) return;\n        \n        const style = document.createElement('style');\n        style.id = 'consent-modal-styles';\n        style.textContent = `\n            .consent-modal {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                z-index: 10000;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                animation: modalFadeIn 0.3s ease;\n            }\n            \n            @keyframes modalFadeIn {\n                from { opacity: 0; }\n                to { opacity: 1; }\n            }\n            \n            .consent-backdrop {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.8);\n                backdrop-filter: blur(4px);\n            }\n            \n            .consent-content {\n                background: #1a1a1a;\n                border: 2px solid #BF5700;\n                border-radius: 12px;\n                padding: 24px;\n                max-width: 500px;\n                max-height: 80vh;\n                overflow-y: auto;\n                position: relative;\n                color: white;\n                animation: modalSlideIn 0.3s ease;\n            }\n            \n            @keyframes modalSlideIn {\n                from { transform: translateY(-20px); opacity: 0; }\n                to { transform: translateY(0); opacity: 1; }\n            }\n            \n            .consent-header h2 {\n                color: #BF5700;\n                margin: 0 0 8px 0;\n                font-size: 1.3rem;\n            }\n            \n            .consent-subtitle {\n                color: #999;\n                margin: 0 0 20px 0;\n            }\n            \n            .consent-type h3 {\n                color: #FF8C00;\n                margin: 0 0 8px 0;\n            }\n            \n            .consent-type p {\n                color: #ccc;\n                margin: 0 0 12px 0;\n                line-height: 1.4;\n            }\n            \n            .sensitive-badge {\n                background: rgba(255, 107, 107, 0.2);\n                color: #FF6B6B;\n                padding: 4px 8px;\n                border-radius: 12px;\n                font-size: 0.8rem;\n                font-weight: 600;\n                display: inline-flex;\n                align-items: center;\n                gap: 4px;\n            }\n            \n            .retention-info {\n                margin: 20px 0;\n                padding: 16px;\n                background: rgba(26, 26, 26, 0.8);\n                border-radius: 8px;\n                border-left: 4px solid #4CAF50;\n            }\n            \n            .retention-info h4 {\n                color: #4CAF50;\n                margin: 0 0 8px 0;\n                font-size: 1rem;\n            }\n            \n            .retention-option {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                margin: 8px 0;\n                cursor: pointer;\n                color: #ccc;\n            }\n            \n            .retention-option input[type=\"radio\"] {\n                accent-color: #BF5700;\n            }\n            \n            .legal-info {\n                margin: 20px 0;\n                padding: 16px;\n                background: rgba(76, 175, 80, 0.1);\n                border-radius: 8px;\n                border-left: 4px solid #4CAF50;\n            }\n            \n            .legal-info h4 {\n                color: #4CAF50;\n                margin: 0 0 12px 0;\n                font-size: 1rem;\n            }\n            \n            .legal-info ul {\n                margin: 0;\n                padding: 0;\n                list-style: none;\n            }\n            \n            .legal-info li {\n                margin: 8px 0;\n                color: #ccc;\n                font-size: 0.9rem;\n            }\n            \n            .consent-actions {\n                display: flex;\n                gap: 12px;\n                margin: 24px 0 16px 0;\n            }\n            \n            .consent-actions button {\n                flex: 1;\n                padding: 12px 16px;\n                border: none;\n                border-radius: 6px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                gap: 8px;\n            }\n            \n            .consent-deny {\n                background: #666;\n                color: white;\n            }\n            \n            .consent-deny:hover {\n                background: #888;\n            }\n            \n            .consent-grant {\n                background: linear-gradient(135deg, #BF5700, #FF8C00);\n                color: white;\n            }\n            \n            .consent-grant:hover {\n                transform: translateY(-1px);\n                box-shadow: 0 4px 12px rgba(191, 87, 0, 0.4);\n            }\n            \n            .legal-footer {\n                border-top: 1px solid #333;\n                padding-top: 16px;\n                font-size: 0.8rem;\n                color: #666;\n                line-height: 1.4;\n            }\n            \n            .legal-footer a {\n                color: #BF5700;\n                text-decoration: none;\n            }\n            \n            .legal-footer a:hover {\n                text-decoration: underline;\n            }\n            \n            .timestamp {\n                margin-top: 8px;\n                font-family: monospace;\n                font-size: 0.75rem;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    setupKillSwitch() {\n        // Emergency stop button - immediately halt all data processing\n        const killSwitch = document.createElement('button');\n        killSwitch.id = 'emergency-kill-switch';\n        killSwitch.className = 'kill-switch-btn';\n        killSwitch.innerHTML = 'üõë STOP ALL RECORDING';\n        killSwitch.setAttribute('aria-label', 'Emergency stop - halt all data processing immediately');\n        killSwitch.style.cssText = `\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            background: #FF4444;\n            color: white;\n            border: 3px solid #CC0000;\n            padding: 12px 16px;\n            border-radius: 6px;\n            font-weight: bold;\n            cursor: pointer;\n            z-index: 10001;\n            font-size: 14px;\n            box-shadow: 0 4px 12px rgba(255, 68, 68, 0.4);\n            animation: urgentPulse 2s infinite;\n            display: none;\n        `;\n        \n        // Add urgent pulse animation\n        const pulseStyle = document.createElement('style');\n        pulseStyle.textContent = `\n            @keyframes urgentPulse {\n                0%, 100% { \n                    transform: scale(1);\n                    box-shadow: 0 4px 12px rgba(255, 68, 68, 0.4);\n                }\n                50% { \n                    transform: scale(1.05);\n                    box-shadow: 0 6px 18px rgba(255, 68, 68, 0.6);\n                }\n            }\n        `;\n        document.head.appendChild(pulseStyle);\n        \n        killSwitch.addEventListener('click', () => {\n            this.activateKillSwitch('user_emergency_stop');\n        });\n        \n        document.body.appendChild(killSwitch);\n        \n        // Show kill switch when any data processing is active\n        this.showKillSwitch = () => {\n            killSwitch.style.display = 'block';\n        };\n        \n        this.hideKillSwitch = () => {\n            killSwitch.style.display = 'none';\n        };\n        \n        // Global keyboard shortcut: Ctrl+Shift+S\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.shiftKey && e.key === 'S') {\n                e.preventDefault();\n                this.activateKillSwitch('keyboard_shortcut');\n            }\n        });\n    }\n    \n    activateKillSwitch(reason) {\n        this.emergencyStop = true;\n        \n        // Log the emergency stop\n        this.logConsentAction({\n            action: 'emergency_kill_switch_activated',\n            reason,\n            timestamp: Date.now(),\n            active_sessions: this.sessionConsent.size\n        });\n        \n        // Notify all registered callbacks\n        this.killSwitchCallbacks.forEach(callback => {\n            try {\n                callback(reason);\n            } catch (error) {\n                console.error('Kill switch callback error:', error);\n            }\n        });\n        \n        // Stop all media streams\n        this.stopAllMediaStreams();\n        \n        // Clear all session data\n        this.sessionConsent.clear();\n        \n        // Show emergency stopped state\n        this.showEmergencyStoppedState(reason);\n        \n        console.error(`üõë EMERGENCY STOP ACTIVATED: ${reason}`);\n        \n        // Announce to accessibility\n        if (window.blazeAccessibility) {\n            window.blazeAccessibility.announceToUser('Emergency stop activated - all recording stopped', 'assertive');\n        }\n        \n        // Send to backend\n        this.reportEmergencyStop(reason);\n    }\n    \n    stopAllMediaStreams() {\n        // Stop any active video/audio streams\n        navigator.mediaDevices.getUserMedia({ video: false, audio: false }).catch(() => {});\n        \n        // Find and stop all media elements\n        document.querySelectorAll('video, audio').forEach(element => {\n            if (element.srcObject) {\n                const tracks = element.srcObject.getTracks();\n                tracks.forEach(track => track.stop());\n                element.srcObject = null;\n            }\n            element.pause();\n        });\n        \n        // Clear any recorded data from memory\n        if (window.recordedChunks) {\n            window.recordedChunks = [];\n        }\n    }\n    \n    showEmergencyStoppedState(reason) {\n        // Create emergency stop overlay\n        const overlay = document.createElement('div');\n        overlay.className = 'emergency-stop-overlay';\n        overlay.innerHTML = `\n            <div class=\"emergency-content\">\n                <div class=\"stop-icon\">üõë</div>\n                <h2>All Recording Stopped</h2>\n                <p>Data processing has been immediately halted.</p>\n                <div class=\"stop-details\">\n                    <p><strong>Reason:</strong> ${reason.replace('_', ' ')}</p>\n                    <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>\n                    <p><strong>Status:</strong> No data is being recorded or processed</p>\n                </div>\n                <div class=\"stop-actions\">\n                    <button class=\"restart-btn\" onclick=\"this.parentElement.parentElement.parentElement.remove()\">\n                        Acknowledge\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        overlay.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(0, 0, 0, 0.95);\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 10002;\n            font-family: Arial, sans-serif;\n        `;\n        \n        const contentStyle = `\n            text-align: center;\n            padding: 40px;\n            background: #2a0000;\n            border: 3px solid #FF4444;\n            border-radius: 12px;\n            max-width: 500px;\n        `;\n        \n        overlay.querySelector('.emergency-content').style.cssText = contentStyle;\n        \n        document.body.appendChild(overlay);\n    }\n    \n    scheduleRetentionCleanup() {\n        // Run retention cleanup every hour\n        setInterval(() => {\n            this.enforceRetention();\n        }, 60 * 60 * 1000);\n        \n        // Initial cleanup\n        setTimeout(() => {\n            this.enforceRetention();\n        }, 5000);\n    }\n    \n    async enforceRetention() {\n        const now = Date.now();\n        let deletedRecords = 0;\n        \n        // Check all consent records for expired data\n        for (const [consentId, record] of this.consentStore.entries()) {\n            for (const [dataType, consent] of Object.entries(record.granted)) {\n                if (consent.granted && now > consent.expires_at) {\n                    // Data has expired - hard delete\n                    await this.hardDeleteData(consentId, dataType, record.athleteId);\n                    deletedRecords++;\n                    \n                    // Log the deletion\n                    this.logConsentAction({\n                        action: 'retention_deletion',\n                        consentId,\n                        dataType,\n                        athleteId: record.athleteId,\n                        expired_at: consent.expires_at,\n                        deleted_at: now\n                    });\n                }\n            }\n        }\n        \n        if (deletedRecords > 0) {\n            console.log(`üóëÔ∏è Retention enforcement: deleted ${deletedRecords} expired data records`);\n        }\n    }\n    \n    async hardDeleteData(consentId, dataType, athleteId) {\n        // This is a HARD DELETE - data is permanently removed\n        // Not a soft delete - this data cannot be recovered\n        \n        try {\n            // Delete from local storage\n            const storageKeys = Object.keys(localStorage);\n            storageKeys.forEach(key => {\n                if (key.includes(athleteId) && key.includes(dataType)) {\n                    localStorage.removeItem(key);\n                }\n            });\n            \n            // Delete from IndexedDB if used\n            if ('indexedDB' in window) {\n                // Implementation would depend on your IndexedDB structure\n                console.log(`Deleting ${dataType} data for athlete ${athleteId} from IndexedDB`);\n            }\n            \n            // Send deletion command to backend\n            await fetch('/api/data/delete', {\n                method: 'DELETE',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    consentId,\n                    dataType,\n                    athleteId,\n                    deletion_type: 'retention_enforcement',\n                    timestamp: Date.now()\n                })\n            });\n            \n            console.log(`üóëÔ∏è Hard deleted ${dataType} data for consent ${consentId}`);\n            \n        } catch (error) {\n            console.error('Failed to delete data:', error);\n            \n            // Log the deletion failure\n            this.logConsentAction({\n                action: 'deletion_failed',\n                consentId,\n                dataType,\n                athleteId,\n                error: error.message,\n                timestamp: Date.now()\n            });\n        }\n    }\n    \n    // Helper methods\n    generateConsentId() {\n        return `consent_${Date.now()}_${Math.random().toString(36).substr(2, 16)}`;\n    }\n    \n    async getIPHash() {\n        try {\n            const response = await fetch('https://api.ipify.org?format=json');\n            const data = await response.json();\n            return await this.hashString(data.ip + 'consent_salt_2024');\n        } catch {\n            return 'ip_unavailable_' + Date.now();\n        }\n    }\n    \n    async hashString(input) {\n        const encoder = new TextEncoder();\n        const data = encoder.encode(input);\n        const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    }\n    \n    sanitizeUserAgent(userAgent) {\n        // Remove potentially identifying information but keep browser/OS info\n        return userAgent.replace(/\\d+\\.\\d+\\.\\d+/g, 'X.X.X').substring(0, 200);\n    }\n    \n    async signConsentRecord(record) {\n        // Create cryptographic signature for legal integrity\n        const recordString = JSON.stringify(record, Object.keys(record).sort());\n        return await this.hashString(recordString + 'signature_key_2024');\n    }\n    \n    logConsentAction(action) {\n        const logEntry = {\n            id: Date.now().toString() + '_' + Math.random().toString(36).substr(2, 9),\n            ...action,\n            logged_at: Date.now()\n        };\n        \n        this.consentLog.unshift(logEntry);\n        \n        // Keep only last 1000 entries\n        if (this.consentLog.length > 1000) {\n            this.consentLog = this.consentLog.slice(0, 1000);\n        }\n        \n        // Persist log\n        this.saveConsentLog();\n    }\n    \n    loadConsentHistory() {\n        try {\n            const stored = localStorage.getItem('blaze_consent_history');\n            if (stored) {\n                const history = JSON.parse(stored);\n                this.consentLog = history;\n            }\n        } catch (error) {\n            console.warn('Failed to load consent history:', error);\n        }\n    }\n    \n    saveConsentLog() {\n        try {\n            localStorage.setItem('blaze_consent_history', JSON.stringify(this.consentLog));\n        } catch (error) {\n            console.warn('Failed to save consent log:', error);\n        }\n    }\n    \n    persistConsentRecord(record) {\n        // Send to backend for permanent storage\n        fetch('/api/consent/record', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(record)\n        }).catch(error => {\n            console.error('Failed to persist consent record:', error);\n        });\n    }\n    \n    reportEmergencyStop(reason) {\n        fetch('/api/consent/emergency-stop', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                reason,\n                timestamp: Date.now(),\n                session_count: this.sessionConsent.size\n            })\n        }).catch(error => {\n            console.error('Failed to report emergency stop:', error);\n        });\n    }\n    \n    bindEvents() {\n        // Listen for page unload to save consent state\n        window.addEventListener('beforeunload', () => {\n            this.saveConsentLog();\n        });\n    }\n    \n    // Public API\n    hasConsent(sessionId, dataType) {\n        if (this.emergencyStop) return false;\n        \n        const consentId = this.sessionConsent.get(sessionId);\n        if (!consentId) return false;\n        \n        const record = this.consentStore.get(consentId);\n        if (!record) return false;\n        \n        const consent = record.granted[dataType];\n        if (!consent || !consent.granted) return false;\n        \n        // Check if consent has expired\n        if (Date.now() > consent.expires_at) {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    getConsentRecord(sessionId) {\n        const consentId = this.sessionConsent.get(sessionId);\n        return consentId ? this.consentStore.get(consentId) : null;\n    }\n    \n    onKillSwitch(callback) {\n        this.killSwitchCallbacks.push(callback);\n    }\n    \n    showKillSwitchIfNeeded() {\n        if (this.sessionConsent.size > 0) {\n            this.showKillSwitch();\n        }\n    }\n    \n    hideKillSwitchIfSafe() {\n        if (this.sessionConsent.size === 0) {\n            this.hideKillSwitch();\n        }\n    }\n    \n    getConsentSummary() {\n        return {\n            active_sessions: this.sessionConsent.size,\n            total_consents: this.consentStore.size,\n            emergency_stopped: this.emergencyStop,\n            consent_log_entries: this.consentLog.length\n        };\n    }\n}\n\n// Initialize consent infrastructure\nif (typeof window !== 'undefined') {\n    window.blazeConsent = new ConsentInfrastructure();\n}\n\n// Export for Node.js\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = ConsentInfrastructure;\n}\n\nconsole.log('‚öñÔ∏è Consent infrastructure ready - your legal lifeline is active');