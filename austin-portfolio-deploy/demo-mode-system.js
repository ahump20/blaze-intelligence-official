/**
 * Blaze Intelligence Demo Mode System
 * Synthetic data for buyers to try without cameras/mics
 */

class DemoModeSystem {
    constructor() {
        this.demoEnabled = false;
        this.syntheticData = {
            athletes: this.generateSyntheticAthletes(),
            performances: this.generateSyntheticPerformances(),
            biometrics: this.generateSyntheticBiometrics(),
            coachingInsights: this.generateCoachingInsights()
        };
        
        this.demoScenarios = {
            'baseball-pitcher': {
                name: 'Elite Pitcher Analysis',
                description: 'Biomechanical analysis of a college pitcher',
                athlete: 'Jake Rodriguez',
                sport: 'baseball',
                position: 'pitcher',
                duration: 45000 // 45 seconds
            },
            'football-qb': {
                name: 'Quarterback Mechanics',
                description: 'Throwing motion analysis for QB development',
                athlete: 'Marcus Thompson',
                sport: 'football',
                position: 'quarterback',
                duration: 35000 // 35 seconds
            },
            'basketball-shooter': {
                name: 'Shot Analysis',
                description: 'Free throw and jump shot mechanics',
                athlete: 'Sarah Chen',
                sport: 'basketball',
                position: 'guard',
                duration: 30000 // 30 seconds
            }
        };
        
        this.currentDemo = null;
        this.demoTimer = null;
        this.progressCallback = null;
        
        this.init();
    }
    
    init() {
        this.setupDemoInterface();
        this.bindEvents();
        this.checkDemoMode();
        
        console.log('🎯 Demo mode system initialized - synthetic data ready');
    }
    
    generateSyntheticAthletes() {\n        return [\n            {\n                id: 'demo_athlete_001',\n                name: 'Jake Rodriguez',\n                sport: 'baseball',\n                position: 'pitcher',\n                year: 'junior',\n                school: 'Texas State University',\n                height: '6\\'2\"',\n                weight: '195 lbs',\n                throws: 'right',\n                bats: 'right',\n                stats: {\n                    era: 2.84,\n                    whip: 1.12,\n                    strikeouts: 156,\n                    wins: 12,\n                    saves: 0\n                },\n                bio: 'Junior right-handed pitcher with excellent control and developing velocity. Strong work ethic and coachable attitude.',\n                image: '/demo/athletes/jake-rodriguez.jpg',\n                confidence_score: 0.92\n            },\n            {\n                id: 'demo_athlete_002',\n                name: 'Marcus Thompson',\n                sport: 'football',\n                position: 'quarterback',\n                year: 'senior',\n                school: 'University of Tennessee',\n                height: '6\\'3\"',\n                weight: '220 lbs',\n                throws: 'right',\n                stats: {\n                    passing_yards: 3450,\n                    touchdowns: 28,\n                    interceptions: 9,\n                    completion_percentage: 68.5,\n                    qb_rating: 152.8\n                },\n                bio: 'Senior quarterback with strong arm and excellent field vision. Natural leader with championship experience.',\n                image: '/demo/athletes/marcus-thompson.jpg',\n                confidence_score: 0.89\n            },\n            {\n                id: 'demo_athlete_003',\n                name: 'Sarah Chen',\n                sport: 'basketball',\n                position: 'point guard',\n                year: 'sophomore',\n                school: 'University of Memphis',\n                height: '5\\'8\"',\n                weight: '140 lbs',\n                shoots: 'right',\n                stats: {\n                    points_per_game: 18.5,\n                    assists_per_game: 7.2,\n                    rebounds_per_game: 4.8,\n                    field_goal_percentage: 45.2,\n                    three_point_percentage: 38.7\n                },\n                bio: 'Sophomore point guard with exceptional court vision and leadership skills. Consistent three-point shooter.',\n                image: '/demo/athletes/sarah-chen.jpg',\n                confidence_score: 0.91\n            }\n        ];\n    }\n    \n    generateSyntheticPerformances() {\n        return {\n            'demo_athlete_001': {\n                pitching: {\n                    velocity: {\n                        fastball: { avg: 92.5, max: 95.2, min: 89.8, consistency: 0.94 },\n                        curveball: { avg: 78.3, max: 80.1, min: 76.5, consistency: 0.89 },\n                        changeup: { avg: 84.7, max: 86.2, min: 83.1, consistency: 0.91 }\n                    },\n                    control: {\n                        strike_percentage: 68.5,\n                        first_pitch_strikes: 72.1,\n                        walk_rate: 6.8,\n                        zone_accuracy: 0.87\n                    },\n                    biomechanics: {\n                        arm_angle: 'three_quarters',\n                        stride_length: '85% of height',\n                        hip_shoulder_separation: 'optimal',\n                        release_consistency: 0.92\n                    }\n                }\n            },\n            'demo_athlete_002': {\n                passing: {\n                    accuracy: {\n                        short_range: 0.89,\n                        medium_range: 0.76,\n                        long_range: 0.58,\n                        under_pressure: 0.71\n                    },\n                    velocity: {\n                        avg_velocity: 58.2,\n                        max_velocity: 63.7,\n                        spiral_consistency: 0.88\n                    },\n                    mechanics: {\n                        footwork_score: 0.85,\n                        release_point_consistency: 0.91,\n                        follow_through: 0.87\n                    }\n                }\n            },\n            'demo_athlete_003': {\n                shooting: {\n                    free_throws: {\n                        percentage: 87.3,\n                        arc_consistency: 0.92,\n                        release_timing: 0.89,\n                        follow_through: 0.94\n                    },\n                    jump_shots: {\n                        percentage: 45.2,\n                        arc_height: 'optimal',\n                        release_speed: 0.88,\n                        balance_score: 0.86\n                    },\n                    three_pointers: {\n                        percentage: 38.7,\n                        range_consistency: 0.83,\n                        shot_selection: 0.91\n                    }\n                }\n            }\n        };\n    }\n    \n    generateSyntheticBiometrics() {\n        return {\n            'demo_athlete_001': {\n                motion_analysis: {\n                    kinetic_chain: {\n                        ground_reaction_force: 1.8,\n                        hip_rotation_velocity: 720,\n                        shoulder_rotation_velocity: 2100,\n                        elbow_extension_velocity: 2800,\n                        efficiency_score: 0.89\n                    },\n                    balance_metrics: {\n                        stride_foot_contact: 0.92,\n                        weight_transfer: 0.87,\n                        posture_stability: 0.91\n                    },\n                    injury_risk: {\n                        shoulder_stress: 'moderate',\n                        elbow_stress: 'low',\n                        back_stress: 'low',\n                        overall_risk: 'low'\n                    }\n                },\n                micro_expressions: {\n                    confidence_indicators: {\n                        eye_contact: 0.88,\n                        facial_tension: 0.23, // lower is better\n                        jaw_clenching: 0.15,\n                        overall_confidence: 0.91\n                    },\n                    focus_metrics: {\n                        attention_consistency: 0.94,\n                        distraction_resistance: 0.87,\n                        concentration_depth: 0.89\n                    }\n                }\n            },\n            'demo_athlete_002': {\n                motion_analysis: {\n                    throwing_mechanics: {\n                        arm_acceleration: 2400,\n                        hip_drive: 0.91,\n                        weight_transfer: 0.88,\n                        follow_through: 0.85\n                    },\n                    pocket_presence: {\n                        movement_efficiency: 0.83,\n                        pressure_response: 0.87,\n                        escape_ability: 0.79\n                    }\n                },\n                micro_expressions: {\n                    leadership_indicators: {\n                        eye_contact_teammates: 0.93,\n                        vocal_confidence: 0.89,\n                        body_language_authority: 0.91\n                    },\n                    pressure_response: {\n                        stress_indicators: 0.22,\n                        composure_under_pressure: 0.88,\n                        decision_confidence: 0.85\n                    }\n                }\n            },\n            'demo_athlete_003': {\n                motion_analysis: {\n                    shooting_form: {\n                        release_angle: 48.5,\n                        arc_consistency: 0.92,\n                        follow_through_snap: 0.89,\n                        balance_score: 0.86\n                    },\n                    court_movement: {\n                        agility_score: 0.91,\n                        reaction_time: 0.185, // seconds\n                        change_of_direction: 0.88\n                    }\n                },\n                micro_expressions: {\n                    game_awareness: {\n                        court_vision_indicators: 0.94,\n                        anticipation_signals: 0.87,\n                        communication_clarity: 0.91\n                    },\n                    clutch_indicators: {\n                        pressure_composure: 0.89,\n                        confidence_in_key_moments: 0.86,\n                        focus_intensity: 0.92\n                    }\n                }\n            }\n        };\n    }\n    \n    generateCoachingInsights() {\n        return {\n            'demo_athlete_001': {\n                strengths: [\n                    'Excellent command of the strike zone with 68.5% strike rate',\n                    'Consistent release point showing 92% mechanical repeatability',\n                    'Strong mental composure with 91% confidence indicators',\n                    'Low injury risk profile across all biomechanical markers'\n                ],\n                improvement_areas: [\n                    'Increase fastball velocity by 2-3 mph through improved hip-shoulder separation',\n                    'Develop more consistent curveball shape for better swing-and-miss potential',\n                    'Work on holding runners - improve pickoff timing and awareness'\n                ],\n                training_recommendations: [\n                    {\n                        focus: 'Velocity Development',\n                        exercises: ['Weighted ball throws', 'Long toss progression', 'Rotational power training'],\n                        timeline: '6-8 weeks',\n                        expected_improvement: '2-4 mph velocity increase'\n                    },\n                    {\n                        focus: 'Command Refinement',\n                        exercises: ['Spot throwing drills', 'Command challenges', 'Mental visualization'],\n                        timeline: '4-6 weeks',\n                        expected_improvement: '5% increase in first-pitch strikes'\n                    }\n                ],\n                projection: {\n                    ceiling: 'Mid-rotation college starter, potential late-round draft pick',\n                    timeline: '2 years to reach peak performance',\n                    key_metrics: 'Velocity development will determine draft status'\n                }\n            },\n            'demo_athlete_002': {\n                strengths: [\n                    'Exceptional arm strength with 63.7 mph max velocity',\n                    'Strong leadership presence with 91% authority indicators',\n                    'Excellent pressure response and composure metrics',\n                    'Consistent footwork and release mechanics'\n                ],\n                improvement_areas: [\n                    'Improve deep ball accuracy - currently 58% on long throws',\n                    'Enhance pocket mobility and pressure escape techniques',\n                    'Develop more consistent pre-snap reads and audibles'\n                ],\n                training_recommendations: [\n                    {\n                        focus: 'Deep Ball Accuracy',\n                        exercises: ['Long throw progressions', 'Moving pocket drills', 'Target precision work'],\n                        timeline: '8-10 weeks',\n                        expected_improvement: '10-15% improvement in deep completion rate'\n                    },\n                    {\n                        focus: 'Pocket Presence',\n                        exercises: ['Pressure simulation', 'Escape route drills', 'Blindfolded footwork'],\n                        timeline: '6-8 weeks',\n                        expected_improvement: 'Reduced sack rate by 20%'\n                    }\n                ],\n                projection: {\n                    ceiling: 'Starting collegiate QB, potential NFL camp invite',\n                    timeline: '1 year to maximize draft position',\n                    key_metrics: 'Deep ball accuracy and mobility improvement critical'\n                }\n            },\n            'demo_athlete_003': {\n                strengths: [\n                    'Exceptional court vision with 94% awareness indicators',\n                    'Consistent three-point shooting at 38.7% clip',\n                    'Strong leadership and communication skills',\n                    'Excellent free throw mechanics and mental approach'\n                ],\n                improvement_areas: [\n                    'Increase overall field goal percentage through shot selection',\n                    'Develop stronger finishing ability around the rim',\n                    'Improve defensive anticipation and steal rate'\n                ],\n                training_recommendations: [\n                    {\n                        focus: 'Shot Selection',\n                        exercises: ['Decision-making drills', 'Shot chart analysis', 'Percentage tracking'],\n                        timeline: '4-6 weeks',\n                        expected_improvement: '3-5% increase in field goal percentage'\n                    },\n                    {\n                        focus: 'Finishing Skills',\n                        exercises: ['Contact layup drills', 'Weak hand development', 'Angle finishing'],\n                        timeline: '8-10 weeks',\n                        expected_improvement: '15% improvement in rim finishing'\n                    }\n                ],\n                projection: {\n                    ceiling: 'All-conference player, potential professional overseas',\n                    timeline: '2 years to reach peak collegiate performance',\n                    key_metrics: 'Overall scoring efficiency and defensive improvement'\n                }\n            }\n        };\n    }\n    \n    setupDemoInterface() {\n        // Create demo mode indicator\n        const indicator = document.createElement('div');\n        indicator.id = 'demo-mode-indicator';\n        indicator.className = 'demo-indicator';\n        indicator.style.display = 'none';\n        \n        indicator.innerHTML = `\n            <div class=\"demo-badge\">\n                <span class=\"demo-icon\">🎯</span>\n                <span class=\"demo-text\">Demo Mode</span>\n                <button class=\"demo-exit\" aria-label=\"Exit demo mode\">×</button>\n            </div>\n            <div class=\"demo-scenario-info\">\n                <span class=\"scenario-name\"></span>\n                <span class=\"scenario-progress\"></span>\n            </div>\n        `;\n        \n        document.body.appendChild(indicator);\n        \n        // Create demo launcher\n        const launcher = document.createElement('div');\n        launcher.className = 'demo-launcher';\n        launcher.innerHTML = `\n            <h3>🎯 Try Blaze Intelligence Demo</h3>\n            <p>Experience our AI coaching platform with realistic synthetic data - no camera or microphone required.</p>\n            \n            <div class=\"demo-scenarios\">\n                ${Object.entries(this.demoScenarios).map(([key, scenario]) => `\n                    <div class=\"demo-scenario\" data-scenario=\"${key}\">\n                        <h4>${scenario.name}</h4>\n                        <p>${scenario.description}</p>\n                        <div class=\"scenario-meta\">\n                            <span class=\"athlete-name\">👤 ${scenario.athlete}</span>\n                            <span class=\"scenario-duration\">⏱️ ${Math.round(scenario.duration / 1000)}s demo</span>\n                        </div>\n                        <button class=\"start-demo-btn\">Start Demo</button>\n                    </div>\n                `).join('')}\n            </div>\n            \n            <div class=\"demo-disclaimer\">\n                <p><strong>Note:</strong> This demo uses synthetic data to showcase our AI analysis capabilities. Real sessions would use your actual camera/microphone input.</p>\n            </div>\n        `;\n        \n        // Add demo launcher to main pages\n        const targetContainers = [\n            '.coach-section',\n            '.dashboard-content',\n            '.main-content'\n        ];\n        \n        targetContainers.forEach(selector => {\n            const container = document.querySelector(selector);\n            if (container) {\n                container.appendChild(launcher.cloneNode(true));\n            }\n        });\n        \n        this.addDemoStyles();\n    }\n    \n    addDemoStyles() {\n        const style = document.createElement('style');\n        style.textContent = `\n            .demo-indicator {\n                position: fixed;\n                top: 80px;\n                right: 20px;\n                z-index: 9999;\n                background: rgba(255, 140, 0, 0.95);\n                color: #000;\n                padding: 12px 16px;\n                border-radius: 8px;\n                font-weight: 600;\n                border: 2px solid #BF5700;\n                backdrop-filter: blur(10px);\n                animation: demoPulse 2s infinite;\n            }\n            \n            @keyframes demoPulse {\n                0%, 100% { box-shadow: 0 0 0 0 rgba(255, 140, 0, 0.4); }\n                50% { box-shadow: 0 0 0 10px rgba(255, 140, 0, 0); }\n            }\n            \n            .demo-badge {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n            }\n            \n            .demo-exit {\n                background: none;\n                border: none;\n                color: #000;\n                font-size: 18px;\n                cursor: pointer;\n                padding: 0 4px;\n                margin-left: 8px;\n            }\n            \n            .demo-scenario-info {\n                margin-top: 8px;\n                padding-top: 8px;\n                border-top: 1px solid rgba(0, 0, 0, 0.2);\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                font-size: 0.9rem;\n            }\n            \n            .scenario-progress {\n                font-family: monospace;\n            }\n            \n            .demo-launcher {\n                background: rgba(26, 26, 26, 0.95);\n                border: 2px solid #BF5700;\n                border-radius: 12px;\n                padding: 24px;\n                margin: 20px 0;\n                color: #fff;\n            }\n            \n            .demo-launcher h3 {\n                color: #FF8C00;\n                margin: 0 0 12px 0;\n                font-size: 1.5rem;\n            }\n            \n            .demo-launcher > p {\n                color: #999;\n                margin: 0 0 20px 0;\n                line-height: 1.5;\n            }\n            \n            .demo-scenarios {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n                gap: 16px;\n                margin: 20px 0;\n            }\n            \n            .demo-scenario {\n                background: rgba(13, 13, 13, 0.8);\n                border: 1px solid #333;\n                border-radius: 8px;\n                padding: 16px;\n                transition: all 0.3s ease;\n                cursor: pointer;\n            }\n            \n            .demo-scenario:hover {\n                border-color: #BF5700;\n                transform: translateY(-2px);\n                box-shadow: 0 4px 12px rgba(191, 87, 0, 0.2);\n            }\n            \n            .demo-scenario h4 {\n                color: #FF8C00;\n                margin: 0 0 8px 0;\n                font-size: 1.1rem;\n            }\n            \n            .demo-scenario p {\n                color: #ccc;\n                margin: 0 0 12px 0;\n                font-size: 0.9rem;\n                line-height: 1.4;\n            }\n            \n            .scenario-meta {\n                display: flex;\n                gap: 12px;\n                margin: 12px 0;\n                font-size: 0.8rem;\n                color: #999;\n            }\n            \n            .start-demo-btn {\n                width: 100%;\n                background: linear-gradient(135deg, #BF5700, #FF8C00);\n                color: white;\n                border: none;\n                padding: 10px 16px;\n                border-radius: 6px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            }\n            \n            .start-demo-btn:hover {\n                transform: translateY(-1px);\n                box-shadow: 0 4px 12px rgba(191, 87, 0, 0.4);\n            }\n            \n            .demo-disclaimer {\n                background: rgba(255, 193, 7, 0.1);\n                border: 1px solid #FFC107;\n                border-radius: 6px;\n                padding: 12px;\n                margin: 20px 0 0 0;\n            }\n            \n            .demo-disclaimer p {\n                margin: 0;\n                color: #FFC107;\n                font-size: 0.85rem;\n                line-height: 1.4;\n            }\n            \n            /* Demo content overlays */\n            .demo-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.9);\n                z-index: 10000;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n            }\n            \n            .demo-content {\n                max-width: 800px;\n                padding: 40px;\n                text-align: center;\n            }\n            \n            .demo-content h2 {\n                color: #FF8C00;\n                margin-bottom: 20px;\n            }\n            \n            .demo-progress {\n                width: 100%;\n                height: 8px;\n                background: rgba(255, 255, 255, 0.2);\n                border-radius: 4px;\n                overflow: hidden;\n                margin: 20px 0;\n            }\n            \n            .demo-progress-bar {\n                height: 100%;\n                background: linear-gradient(90deg, #BF5700, #FF8C00);\n                border-radius: 4px;\n                transition: width 0.3s ease;\n            }\n            \n            .synthetic-data-badge {\n                position: absolute;\n                top: 10px;\n                left: 10px;\n                background: rgba(255, 193, 7, 0.9);\n                color: #000;\n                padding: 4px 8px;\n                border-radius: 4px;\n                font-size: 0.8rem;\n                font-weight: 600;\n            }\n            \n            @media (max-width: 768px) {\n                .demo-indicator {\n                    position: relative;\n                    top: auto;\n                    right: auto;\n                    margin: 10px;\n                }\n                \n                .demo-scenarios {\n                    grid-template-columns: 1fr;\n                }\n                \n                .demo-content {\n                    padding: 20px;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    bindEvents() {\n        // Demo launcher click events\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.start-demo-btn')) {\n                const scenario = e.target.closest('.demo-scenario').getAttribute('data-scenario');\n                this.startDemo(scenario);\n            }\n            \n            if (e.target.matches('.demo-exit')) {\n                this.exitDemo();\n            }\n        });\n        \n        // URL parameter check for demo mode\n        const urlParams = new URLSearchParams(window.location.search);\n        if (urlParams.get('demo') === 'true') {\n            this.enableDemoMode();\n        }\n    }\n    \n    checkDemoMode() {\n        // Check if demo mode should be enabled\n        const shouldEnableDemo = [\n            window.location.search.includes('demo=true'),\n            localStorage.getItem('blaze_demo_mode') === 'true',\n            !this.hasRealUserData(),\n            this.isFirstTimeVisitor()\n        ].some(Boolean);\n        \n        if (shouldEnableDemo) {\n            this.enableDemoMode();\n        }\n    }\n    \n    hasRealUserData() {\n        // Check if user has real data (not demo)\n        const indicators = [\n            localStorage.getItem('blaze_user_videos'),\n            localStorage.getItem('blaze_biometric_data'),\n            sessionStorage.getItem('camera_permission_granted')\n        ];\n        \n        return indicators.some(indicator => indicator && indicator !== 'demo');\n    }\n    \n    isFirstTimeVisitor() {\n        return !localStorage.getItem('blaze_visited_before');\n    }\n    \n    async startDemo(scenarioKey) {\n        const scenario = this.demoScenarios[scenarioKey];\n        if (!scenario) return;\n        \n        this.currentDemo = {\n            scenario: scenarioKey,\n            athlete: scenario.athlete,\n            startTime: Date.now(),\n            duration: scenario.duration\n        };\n        \n        this.enableDemoMode();\n        this.showDemoOverlay(scenario);\n        \n        // Start demo timer\n        this.demoTimer = setTimeout(() => {\n            this.completeDemo();\n        }, scenario.duration);\n        \n        // Update progress\n        this.startProgressUpdates();\n        \n        // Announce demo start\n        if (window.blazeAccessibility) {\n            window.blazeAccessibility.announceToUser(`Starting ${scenario.name} demo`, 'assertive');\n        }\n        \n        console.log(`🎯 Demo started: ${scenario.name}`);\n    }\n    \n    showDemoOverlay(scenario) {\n        const overlay = document.createElement('div');\n        overlay.className = 'demo-overlay';\n        overlay.innerHTML = `\n            <div class=\"demo-content\">\n                <h2>🎯 ${scenario.name}</h2>\n                <p>Analyzing ${scenario.athlete}'s ${scenario.sport} performance...</p>\n                \n                <div class=\"demo-progress\">\n                    <div class=\"demo-progress-bar\" style=\"width: 0%\"></div>\n                </div>\n                \n                <div class=\"demo-status\">\n                    <div class=\"status-line\">📹 Processing video input (synthetic)</div>\n                    <div class=\"status-line\">🧠 AI analysis in progress...</div>\n                    <div class=\"status-line\">📊 Generating insights...</div>\n                </div>\n                \n                <button class=\"demo-exit\" style=\"margin-top: 20px; padding: 8px 16px; background: #666; color: white; border: none; border-radius: 4px; cursor: pointer;\">Skip Demo</button>\n            </div>\n        `;\n        \n        document.body.appendChild(overlay);\n        \n        // Simulate processing steps\n        this.simulateProcessingSteps(overlay);\n    }\n    \n    simulateProcessingSteps(overlay) {\n        const steps = [\n            { time: 2000, message: '🎥 Video capture initialized' },\n            { time: 4000, message: '👤 Athlete detected and tracked' },\n            { time: 7000, message: '🦴 Pose estimation complete' },\n            { time: 10000, message: '📐 Biomechanical analysis running' },\n            { time: 13000, message: '🤖 AI model processing motion data' },\n            { time: 16000, message: '😊 Micro-expression analysis active' },\n            { time: 20000, message: '📈 Performance metrics calculated' },\n            { time: 23000, message: '💡 Coaching insights generated' },\n            { time: 26000, message: '✅ Analysis complete' }\n        ];\n        \n        steps.forEach((step, index) => {\n            setTimeout(() => {\n                const statusLines = overlay.querySelectorAll('.status-line');\n                if (statusLines[index % 3]) {\n                    statusLines[index % 3].textContent = step.message;\n                }\n            }, step.time);\n        });\n    }\n    \n    startProgressUpdates() {\n        if (!this.currentDemo) return;\n        \n        const updateProgress = () => {\n            if (!this.currentDemo) return;\n            \n            const elapsed = Date.now() - this.currentDemo.startTime;\n            const progress = Math.min((elapsed / this.currentDemo.duration) * 100, 100);\n            \n            // Update progress bar\n            const progressBar = document.querySelector('.demo-progress-bar');\n            if (progressBar) {\n                progressBar.style.width = `${progress}%`;\n            }\n            \n            // Update scenario info\n            const scenarioProgress = document.querySelector('.scenario-progress');\n            if (scenarioProgress) {\n                const remainingSeconds = Math.ceil((this.currentDemo.duration - elapsed) / 1000);\n                scenarioProgress.textContent = `${remainingSeconds}s remaining`;\n            }\n            \n            if (progress < 100) {\n                setTimeout(updateProgress, 500);\n            }\n        };\n        \n        updateProgress();\n    }\n    \n    completeDemo() {\n        if (!this.currentDemo) return;\n        \n        const scenario = this.demoScenarios[this.currentDemo.scenario];\n        \n        // Remove overlay\n        const overlay = document.querySelector('.demo-overlay');\n        if (overlay) {\n            overlay.remove();\n        }\n        \n        // Show demo results\n        this.showDemoResults(this.currentDemo.scenario);\n        \n        // Update demo completion status\n        localStorage.setItem('blaze_demo_completed', 'true');\n        \n        console.log(`✅ Demo completed: ${scenario.name}`);\n    }\n    \n    showDemoResults(scenarioKey) {\n        const athlete = this.syntheticData.athletes.find(a => a.id.includes('001')); // Demo athlete\n        const insights = this.syntheticData.coachingInsights[athlete.id];\n        \n        // This would integrate with your existing results display\n        // For now, just announce completion\n        if (window.blazeAccessibility) {\n            window.blazeAccessibility.announceToUser('Demo analysis complete. View your results below.', 'assertive');\n        }\n        \n        // Replace real-time data with synthetic data\n        this.injectSyntheticDataIntoUI(scenarioKey);\n    }\n    \n    injectSyntheticDataIntoUI(scenarioKey) {\n        const scenario = this.demoScenarios[scenarioKey];\n        const athleteData = this.syntheticData.athletes.find(a => a.name === scenario.athlete);\n        \n        if (!athleteData) return;\n        \n        // Add synthetic data badges to UI elements\n        document.querySelectorAll('.chart, .metric, .insight').forEach(element => {\n            if (!element.querySelector('.synthetic-data-badge')) {\n                const badge = document.createElement('div');\n                badge.className = 'synthetic-data-badge';\n                badge.textContent = 'Demo Data';\n                element.style.position = 'relative';\n                element.appendChild(badge);\n            }\n        });\n        \n        // Replace metrics with synthetic data\n        this.updateMetricsWithSyntheticData(athleteData.id);\n    }\n    \n    updateMetricsWithSyntheticData(athleteId) {\n        const performance = this.syntheticData.performances[athleteId];\n        const biometrics = this.syntheticData.biometrics[athleteId];\n        \n        if (!performance || !biometrics) return;\n        \n        // Update confidence scores\n        document.querySelectorAll('.confidence-indicator').forEach(indicator => {\n            const confidence = Math.random() * 0.2 + 0.8; // 80-100%\n            indicator.textContent = `${(confidence * 100).toFixed(0)}%`;\n        });\n        \n        // Update performance metrics\n        Object.entries(performance).forEach(([category, data]) => {\n            Object.entries(data).forEach(([metric, value]) => {\n                const elements = document.querySelectorAll(`[data-metric=\"${metric}\"], .${metric}-value`);\n                elements.forEach(el => {\n                    if (typeof value === 'number') {\n                        el.textContent = value.toFixed(2);\n                    } else if (typeof value === 'object' && value.avg) {\n                        el.textContent = value.avg.toFixed(1);\n                    }\n                });\n            });\n        });\n    }\n    \n    enableDemoMode() {\n        this.demoEnabled = true;\n        \n        // Show demo indicator\n        const indicator = document.getElementById('demo-mode-indicator');\n        if (indicator) {\n            indicator.style.display = 'block';\n        }\n        \n        // Add demo class to body\n        document.body.classList.add('demo-mode-active');\n        \n        // Store demo mode state\n        localStorage.setItem('blaze_demo_mode', 'true');\n        \n        // Update URL without refreshing\n        if (window.history && window.history.pushState) {\n            const url = new URL(window.location);\n            url.searchParams.set('demo', 'true');\n            window.history.pushState({}, '', url);\n        }\n        \n        console.log('🎯 Demo mode enabled - using synthetic data');\n    }\n    \n    exitDemo() {\n        this.demoEnabled = false;\n        \n        // Clear demo timer\n        if (this.demoTimer) {\n            clearTimeout(this.demoTimer);\n            this.demoTimer = null;\n        }\n        \n        // Hide demo indicator\n        const indicator = document.getElementById('demo-mode-indicator');\n        if (indicator) {\n            indicator.style.display = 'none';\n        }\n        \n        // Remove demo overlay if present\n        const overlay = document.querySelector('.demo-overlay');\n        if (overlay) {\n            overlay.remove();\n        }\n        \n        // Remove demo class from body\n        document.body.classList.remove('demo-mode-active');\n        \n        // Remove synthetic data badges\n        document.querySelectorAll('.synthetic-data-badge').forEach(badge => badge.remove());\n        \n        // Clear demo mode state\n        localStorage.removeItem('blaze_demo_mode');\n        \n        // Update URL\n        if (window.history && window.history.pushState) {\n            const url = new URL(window.location);\n            url.searchParams.delete('demo');\n            window.history.pushState({}, '', url);\n        }\n        \n        this.currentDemo = null;\n        \n        console.log('🎯 Demo mode disabled');\n        \n        // Reload page to remove demo data\n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n    }\n    \n    // Public API\n    isDemoMode() {\n        return this.demoEnabled;\n    }\n    \n    getSyntheticData(type, athleteId) {\n        if (!this.demoEnabled) return null;\n        \n        return this.syntheticData[type] && this.syntheticData[type][athleteId] || this.syntheticData[type];\n    }\n    \n    getAvailableScenarios() {\n        return Object.entries(this.demoScenarios).map(([key, scenario]) => ({\n            key,\n            ...scenario\n        }));\n    }\n    \n    setProgressCallback(callback) {\n        this.progressCallback = callback;\n    }\n}\n\n// Initialize global demo system\nwindow.blazeDemo = new DemoModeSystem();\n\n// Export for Node.js environment\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = DemoModeSystem;\n}\n\nconsole.log('🎯 Demo mode system active - synthetic athletes ready');